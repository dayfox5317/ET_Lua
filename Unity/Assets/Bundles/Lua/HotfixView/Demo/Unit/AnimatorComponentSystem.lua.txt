-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETCold = ETCold
local UnityEngine = UnityEngine
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("AnimatorComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.AnimatorComponentSystem.Awake(self)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.AnimatorComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.AnimatorComponent }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("AnimatorComponentUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      ET.AnimatorComponentSystem.Update(self)
    end
    return {
      base = function (out)
        return {
          out.ET.UpdateSystem_1(out.ET.AnimatorComponent)
        }
      end,
      Update = Update,
      __metadata__ = function (out)
        return {
          methods = {
            { "Update", 0x106, Update, out.ET.AnimatorComponent }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("AnimatorComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      self.animationClips = nil
      self.Parameter = nil
      self.Animator = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.AnimatorComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.AnimatorComponent }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("AnimatorComponentSystem", function (namespace)
    local Awake, Update, HasParameter, PlayInTime, Play, AnimationTime, PauseAnimator, RunAnimator, 
    SetBoolValue, SetFloatValue, SetIntValue, SetTrigger, SetAnimatorSpeed, ResetAnimatorSpeed
    Awake = function (self)
      local animator = System.as(self:getParent():GetComponent(ET.GameObjectComponent).GameObject:GetComponent(System.typeof(UnityEngine.Animator)), UnityEngine.Animator)

      if UnityEngine.Object.op_Equality(animator, nil) then
        return
      end

      if UnityEngine.Object.op_Equality(animator:getruntimeAnimatorController(), nil) then
        return
      end

      if animator:getruntimeAnimatorController():getanimationClips() == nil then
        return
      end
      self.Animator = animator

      local count = ETCold.LoadHelper.GetanimationClipsLength(animator)
      local animationClipArray = animator:getruntimeAnimatorController():getanimationClips()
      -- animator.runtimeAnimatorController.animationClips;

      for i = 0, count - 1 do
        local animationClip = System.cast(UnityEngine.AnimationClip, animationClipArray:GetValue(i))
        self.animationClips:set(animationClip:getname(), animationClip)
      end

      count = ETCold.LoadHelper.GetAnimatorControllerParameterLength(animator)
      local parametersArray = animator:getparameters()

      for i = 0, count - 1 do
        local animatorControllerParameter = System.cast(UnityEngine.AnimatorControllerParameter, parametersArray:GetValue(i))
        self.Parameter:Add(animatorControllerParameter:getname())
      end
    end
    Update = function (self)
      if self.isStop then
        return
      end

      if self.MotionType == ET.MotionType.None then
        return
      end

      System.try(function ()
        self.Animator:SetFloat("MotionSpeed", self.MontionSpeed)

        self.Animator:SetTrigger(self.MotionType:EnumToString(ET.MotionType))

        self.MontionSpeed = 1
        self.MotionType = ET.MotionType.None
      end, function (default)
        local ex = default
        System.throw(System.Exception("动作播放失败: " .. self.MotionType:EnumToString(ET.MotionType), ex))
      end)
    end
    HasParameter = function (self, parameter)
      return self.Parameter:Contains(parameter)
    end
    PlayInTime = function (self, motionType, time)
      local animationClip
      local default
      default, animationClip = self.animationClips:TryGetValue(motionType:EnumToString(ET.MotionType))
      if not default then
        System.throw(System.Exception("找不到该动作: " .. motionType:EnumToString(ET.MotionType)))
      end

      local motionSpeed = animationClip:getlength() / time
      if motionSpeed < 0.01 or motionSpeed > 1000 then
        ET.Log.Error("motionSpeed数值异常, " .. motionSpeed .. ", 此动作跳过")
        return
      end
      self.MotionType = motionType
      self.MontionSpeed = motionSpeed
    end
    Play = function (self, motionType, motionSpeed)
      if not HasParameter(self, motionType:EnumToString(ET.MotionType)) then
        return
      end
      self.MotionType = motionType
      self.MontionSpeed = motionSpeed
    end
    AnimationTime = function (self, motionType)
      local animationClip
      local default
      default, animationClip = self.animationClips:TryGetValue(motionType:EnumToString(ET.MotionType))
      if not default then
        System.throw(System.Exception("找不到该动作: " .. motionType:EnumToString(ET.MotionType)))
      end
      return animationClip:getlength()
    end
    PauseAnimator = function (self)
      if self.isStop then
        return
      end
      self.isStop = true

      if UnityEngine.Object.op_Equality(self.Animator, nil) then
        return
      end
      self.stopSpeed = self.Animator:getspeed()
      self.Animator:setspeed(0)
    end
    RunAnimator = function (self)
      if not self.isStop then
        return
      end

      self.isStop = false

      if UnityEngine.Object.op_Equality(self.Animator, nil) then
        return
      end
      self.Animator:setspeed(self.stopSpeed)
    end
    SetBoolValue = function (self, name, state)
      if not HasParameter(self, name) then
        return
      end

      self.Animator:SetBool(name, state)
    end
    SetFloatValue = function (self, name, state)
      if not HasParameter(self, name) then
        return
      end

      self.Animator:SetFloat(name, state)
    end
    SetIntValue = function (self, name, value)
      if not HasParameter(self, name) then
        return
      end

      self.Animator:SetInteger(name, value)
    end
    SetTrigger = function (self, name)
      if not HasParameter(self, name) then
        return
      end

      self.Animator:SetTrigger(name)
    end
    SetAnimatorSpeed = function (self, speed)
      self.stopSpeed = self.Animator:getspeed()
      self.Animator:setspeed(speed)
    end
    ResetAnimatorSpeed = function (self)
      self.Animator:setspeed(self.stopSpeed)
    end
    return {
      Awake = Awake,
      Update = Update,
      HasParameter = HasParameter,
      PlayInTime = PlayInTime,
      Play = Play,
      AnimationTime = AnimationTime,
      PauseAnimator = PauseAnimator,
      RunAnimator = RunAnimator,
      SetBoolValue = SetBoolValue,
      SetFloatValue = SetFloatValue,
      SetIntValue = SetIntValue,
      SetTrigger = SetTrigger,
      SetAnimatorSpeed = SetAnimatorSpeed,
      ResetAnimatorSpeed = ResetAnimatorSpeed,
      __metadata__ = function (out)
        return {
          methods = {
            { "AnimationTime", 0x28E, AnimationTime, out.ET.AnimatorComponent, out.ET.MotionType, System.Single },
            { "Awake", 0x10E, Awake, out.ET.AnimatorComponent },
            { "HasParameter", 0x28E, HasParameter, out.ET.AnimatorComponent, System.String, System.Boolean },
            { "PauseAnimator", 0x10E, PauseAnimator, out.ET.AnimatorComponent },
            { "Play", 0x30E, Play, out.ET.AnimatorComponent, out.ET.MotionType, System.Single },
            { "PlayInTime", 0x30E, PlayInTime, out.ET.AnimatorComponent, out.ET.MotionType, System.Single },
            { "ResetAnimatorSpeed", 0x10E, ResetAnimatorSpeed, out.ET.AnimatorComponent },
            { "RunAnimator", 0x10E, RunAnimator, out.ET.AnimatorComponent },
            { "SetAnimatorSpeed", 0x20E, SetAnimatorSpeed, out.ET.AnimatorComponent, System.Single },
            { "SetBoolValue", 0x30E, SetBoolValue, out.ET.AnimatorComponent, System.String, System.Boolean },
            { "SetFloatValue", 0x30E, SetFloatValue, out.ET.AnimatorComponent, System.String, System.Single },
            { "SetIntValue", 0x30E, SetIntValue, out.ET.AnimatorComponent, System.String, System.Int32 },
            { "SetTrigger", 0x20E, SetTrigger, out.ET.AnimatorComponent, System.String },
            { "Update", 0x10E, Update, out.ET.AnimatorComponent }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
