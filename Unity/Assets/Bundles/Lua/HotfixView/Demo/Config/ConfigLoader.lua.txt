-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETCold = ETCold
local UnityEngine = UnityEngine
System.namespace("ET", function (namespace)
  namespace.class("ConfigLoader", function (namespace)
    local GetAllConfigBytes, GetOneConfigBytes
    GetAllConfigBytes = function (this, output)
      local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.ConfigAttribute))

      --Dictionary<string, UnityEngine.Object> keys = ResourcesComponent.Instance.get("config.unity3d");

      for _, kv in System.each(types) do
        local data = System.as(ET.ResourcesComponent.Instance:LoadAsset1(ETCold.ABPathHelper.GetConfigPath(kv:getName()), System.typeof(UnityEngine.TextAsset)), UnityEngine.TextAsset)
        output:set(kv:getName(), data:getbytes())
      end
    end
    GetOneConfigBytes = function (this, configName)
      local data = System.as(ET.ResourcesComponent.Instance:LoadAsset1(ETCold.ABPathHelper.GetConfigPath(configName), System.typeof(UnityEngine.TextAsset)), UnityEngine.TextAsset)

      return data:getbytes()
    end
    return {
      base = function (out)
        return {
          out.ET.IConfigLoader
        }
      end,
      GetAllConfigBytes = GetAllConfigBytes,
      GetOneConfigBytes = GetOneConfigBytes,
      __metadata__ = function (out)
        return {
          methods = {
            { "GetAllConfigBytes", 0x106, GetAllConfigBytes, System.Dictionary(System.String, System.Array(System.Byte)) },
            { "GetOneConfigBytes", 0x186, GetOneConfigBytes, System.String, System.Array(System.Byte) }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
