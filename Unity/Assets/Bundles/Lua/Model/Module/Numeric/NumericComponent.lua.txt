-- Generated by CSharp.lua Compiler
local System = System
local DictInt32Int64 = System.Dictionary(System.Int32, System.Int64)
local ET
local ETEventType
System.import(function (out)
  ET = out.ET
  ETEventType = ET.EventType
end)
System.namespace("ET", function (namespace)
  namespace.namespace("EventType", function (namespace)
    namespace.struct("NumbericChange", function (namespace)
      local __ctor__
      __ctor__ = function (this)
        this.NumericType = ET.NumericType(0)
      end
      return {
        Old = 0,
        New = 0,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "New", 0x6, System.Int64 },
              { "NumericType", 0x6, out.ET.NumericType },
              { "Old", 0x6, System.Int64 },
              { "Parent", 0x6, out.ET.Entity }
            },
            class = { 0x6 }
          }
        end
      }
    end)
  end)


  namespace.class("NumericComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.NumericComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.NumericComponent }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("NumericComponent", function (namespace)
    local Awake, GetAsFloat, GetAsFloat1, GetAsInt, GetAsLong, GetAsInt1, GetAsLong1, Set, 
    Set1, Set2, get, set, GetByKey, Update, __ctor__
    __ctor__ = function (this)
      this.NumericDic = DictInt32Int64()
      ET.Entity.__ctor__(this)
    end
    Awake = function (this)
      -- 这里初始化base值
    end
    GetAsFloat = function (this, numericType)
      return GetByKey(this, System.Convert.ToInt32(numericType)) / 10000
    end
    GetAsFloat1 = function (this, numericType)
      return GetByKey(this, numericType) / 10000
    end
    GetAsInt = function (this, numericType)
      return System.toInt32(GetByKey(this, System.Convert.ToInt32(numericType)))
    end
    GetAsLong = function (this, numericType)
      return GetByKey(this, System.Convert.ToInt32(numericType))
    end
    GetAsInt1 = function (this, numericType)
      return System.toInt32(GetByKey(this, numericType))
    end
    GetAsLong1 = function (this, numericType)
      return GetByKey(this, numericType)
    end
    Set = function (this, nt, value)
      this:set(nt, System.ToInt32(value * 10000))
    end
    Set1 = function (this, nt, value)
      this:set(nt, value)
    end
    Set2 = function (this, nt, value)
      this:set(nt, value)
    end
    get = function (this, numericType)
      return GetByKey(this, System.Convert.ToInt32(numericType))
    end
    set = function (this, numericType, value)
      local v = GetByKey(this, System.Convert.ToInt32(numericType))
      if v == value then
        return
      end

      this.NumericDic:set(System.Convert.ToInt32(numericType), value)

      Update(this, numericType)
    end
    GetByKey = function (this, key)
      local value = 0
      local _
      _, value = this.NumericDic:TryGetValue(key)
      return value
    end
    Update = function (this, numericType)
      if numericType < ET.NumericType.Max then
        return
      end
      local final = System.div(System.Convert.ToInt32(numericType), 10)
      local bas = final * 10 + 1
      local add = final * 10 + 2
      local pct = final * 10 + 3
      local finalAdd = final * 10 + 4
      local finalPct = final * 10 + 5

      -- 一个数值可能会多种情况影响，比如速度,加个buff可能增加速度绝对值100，也有些buff增加10%速度，所以一个值可以由5个值进行控制其最终结果
      -- final = (((base + add) * (100 + pct) / 100) + finalAdd) * (100 + finalPct) / 100;
      local old = this.NumericDic:get(final)
      local result = System.ToInt64(((GetByKey(this, bas) + GetByKey(this, add)) * (100 + GetAsFloat1(this, pct)) / 100 + GetByKey(this, finalAdd)) * (100 + GetAsFloat1(this, finalPct)) / 100 * 10000)
      this.NumericDic:set(final, result)
      local default = ETEventType.NumbericChange()
      default.Parent = this:getParent()
      default.NumericType = ET.NumericType(final)
      default.Old = old
      default.New = result
      ET.Game.getEventSystem():Publish(default, ETEventType.NumbericChange):Coroutine()
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      GetAsFloat = GetAsFloat,
      GetAsFloat1 = GetAsFloat1,
      GetAsInt = GetAsInt,
      GetAsLong = GetAsLong,
      GetAsInt1 = GetAsInt1,
      GetAsLong1 = GetAsLong1,
      Set = Set,
      Set1 = Set1,
      Set2 = Set2,
      get = get,
      set = set,
      Update = Update,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "NumericDic", 0x6, System.Dictionary(System.Int32, System.Int64) }
          },
          methods = {
            { "Awake", 0x6, Awake },
            { "GetAsFloat", 0x186, GetAsFloat, out.ET.NumericType, System.Single },
            { "GetAsFloat", 0x186, GetAsFloat1, System.Int32, System.Single },
            { "GetAsInt", 0x186, GetAsInt, out.ET.NumericType, System.Int32 },
            { "GetAsInt", 0x186, GetAsInt1, System.Int32, System.Int32 },
            { "GetAsLong", 0x186, GetAsLong, out.ET.NumericType, System.Int64 },
            { "GetAsLong", 0x186, GetAsLong1, System.Int32, System.Int64 },
            { "GetByKey", 0x181, GetByKey, System.Int32, System.Int64 },
            { "Set", 0x206, Set, out.ET.NumericType, System.Single },
            { "Set", 0x206, Set1, out.ET.NumericType, System.Int32 },
            { "Set", 0x206, Set2, out.ET.NumericType, System.Int64 },
            { "Update", 0x106, Update, out.ET.NumericType }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
