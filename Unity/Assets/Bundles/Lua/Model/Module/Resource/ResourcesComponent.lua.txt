-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local libx = libx
local UnityEngine = UnityEngine
local ETTask_1Object = ET.ETTask_1(UnityEngine.Object)
local DictStringAssetRequest = System.Dictionary(System.String, libx.AssetRequest)
local ETTask_1SceneAssetRequest = ET.ETTask_1(libx.SceneAssetRequest)
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("ResourcesComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.ResourcesComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.ResourcesComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("ResourcesComponent", function (namespace)
    local Awake, LoadAsset, LoadAssetAsync, UnLoadAsset, LoadSceneAsync, UnLoadScene, Dispose, LoadSceneAsync1, 
    LoadAssetAsync1, LoadAsset1, GetAllAssetPaths, class, __ctor__
    __ctor__ = function (this)
      ET.Entity.__ctor__(this)
    end
    Awake = function (this)
      this.n2req = DictStringAssetRequest()


      class.Instance = this
    end
    -- <summary>
    -- 加载资源，path需要是全路径
    -- </summary>
    -- <param name="path"></param>
    -- <typeparam name="T"></typeparam>
    -- <returns></returns>
    LoadAsset = function (this, path, T)
      local assetRequest = libx.Assets.LoadAsset(path, System.typeof(T))
      return System.cast(T, assetRequest:getasset())
    end
    -- <summary>
    -- 异步加载资源，path需要是全路径
    -- </summary>
    -- <param name="path"></param>
    -- <typeparam name="T"></typeparam>
    -- <returns></returns>
    LoadAssetAsync = function (this, path, T)
      local tcs = ET.ETTask_1(T).Create(false)
      local assetRequest = libx.Assets.LoadAssetAsync(path, System.typeof(T))
      this.n2req:set(path, assetRequest)
      --如果已经加载完成则直接返回结果（适用于编辑器模式下的异步写法和重复加载）,下面的API如果有需求可按照此格式添加相关代码
      if assetRequest:getisDone() then
        tcs:SetResult(System.cast(T, assetRequest:getasset()))
        return tcs
      end

      --+=委托链，否则会导致前面完成委托被覆盖
      assetRequest.completed = assetRequest.completed + function (arq)
        tcs:SetResult(System.cast(T, arq:getasset()))
      end
      return tcs
    end
    -- <summary>
    -- 卸载资源，path需要是全路径
    -- </summary>
    -- <param name="path"></param>
    UnLoadAsset = function (this, path)
      if this.n2req:ContainsKey(path) then
        this.n2req:get(path):Release()
        this.n2req:RemoveKey(path)
        ET.Log.Debug("[Unload]" .. path)
      end
    end
    -- <summary>
    -- 加载场景，path需要是全路径
    -- </summary>
    -- <param name="path"></param>
    -- <returns></returns>
    LoadSceneAsync = function (this, path)
      local tcs = ETTask_1SceneAssetRequest.Create(false)
      local sceneAssetRequest = libx.Assets.LoadSceneAsync(path, false)
      sceneAssetRequest.completed = function (arq)
        tcs:SetResult(sceneAssetRequest)
      end
      return tcs
    end
    -- <summary>
    -- 卸载场景，path需要是全路径
    -- </summary>
    -- <param name="path"></param>
    UnLoadScene = function (this, path)
      UnLoadAsset(this, path)
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      ET.Entity.Dispose(this)

      class.Instance = nil

      --foreach (var item in n2req)
      --{
      --    UnLoadAsset(item.Key);
      --}
    end
    LoadSceneAsync1 = function (this, path, ad)
      local req = libx.Assets.LoadSceneAsync(path, ad)

      return req
    end
    LoadAssetAsync1 = function (this, path, type)
      return System.async(function (async, this, path, type)
        if this.n2req:ContainsKey(path) then
          return this.n2req:get(path):getasset()
        end
        local req = libx.Assets.LoadAssetAsync(path, type)
        local task = ETTask_1Object.Create(true)

        req.completed = function (x)
          task:SetResult(x:getasset())
        end
        this.n2req:set(path, req)
        return async:Await(task)
      end, nil, this, path, type)
    end
    LoadAsset1 = function (this, path, type)
      if this.n2req:ContainsKey(path) then
        return this.n2req:get(path):getasset()
      end
      local req = libx.Assets.LoadAsset(path, type)
      this.n2req:set(path, req)
      return req:getasset()
    end
    GetAllAssetPaths = function (this)
      return libx.Assets.GetAllAssetPaths()
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      LoadAsset = LoadAsset,
      LoadAssetAsync = LoadAssetAsync,
      UnLoadAsset = UnLoadAsset,
      LoadSceneAsync = LoadSceneAsync,
      UnLoadScene = UnLoadScene,
      Dispose = Dispose,
      LoadSceneAsync1 = LoadSceneAsync1,
      LoadAssetAsync1 = LoadAssetAsync1,
      LoadAsset1 = LoadAsset1,
      GetAllAssetPaths = GetAllAssetPaths,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Instance", 0xE, class }
          },
          fields = {
            { "n2req", 0x1, System.Dictionary(System.String, out.libx.AssetRequest) }
          },
          methods = {
            { "Awake", 0x6, Awake },
            { "Dispose", 0x6, Dispose },
            { "GetAllAssetPaths", 0x86, GetAllAssetPaths, System.Array(System.String) },
            { "LoadAsset", 0x10186, LoadAsset, function (T) return System.String, T end },
            { "LoadAsset", 0x286, LoadAsset1, System.String, System.Type, out.UnityEngine.Object },
            { "LoadAssetAsync", 0x10186, LoadAssetAsync, function (T) return System.String, out.ET.ETTask_1(T) end },
            { "LoadAssetAsync", 0x286, LoadAssetAsync1, System.String, System.Type, out.ET.ETTask_1(out.UnityEngine.Object) },
            { "LoadSceneAsync", 0x186, LoadSceneAsync, System.String, out.ET.ETTask_1(out.libx.SceneAssetRequest) },
            { "LoadSceneAsync", 0x286, LoadSceneAsync1, System.String, System.Boolean, out.libx.AssetRequest },
            { "UnLoadAsset", 0x106, UnLoadAsset, System.String },
            { "UnLoadScene", 0x106, UnLoadScene, System.String }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
