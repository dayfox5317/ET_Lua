-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local libx = libx
local UnityEngine = UnityEngine
local ETTask_1Object = ET.ETTask_1(UnityEngine.Object)
local DictStringAssetRequest = System.Dictionary(System.String, libx.AssetRequest)
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("ResourcesComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.ResourcesComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.ResourcesComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("ResourcesComponent", function (namespace)
    local Awake, Dispose, LoadSceneAsync, LoadAssetAsync, LoadAsset, UnLoadAsset, GetAllAssetPaths, class, 
    __ctor__
    __ctor__ = function (this)
      ET.Entity.__ctor__(this)
    end
    Awake = function (this)
      this.n2req = DictStringAssetRequest()


      class.Instance = this
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      ET.Entity.Dispose(this)

      class.Instance = nil

      --foreach (var item in n2req)
      --{
      --    UnLoadAsset(item.Key);
      --}
    end
    LoadSceneAsync = function (this, path, ad)
      local req = libx.Assets.LoadSceneAsync(path, ad)

      return req
    end
    LoadAssetAsync = function (this, path, type)
      return System.async(function (async, this, path, type)
        if this.n2req:ContainsKey(path) then
          return this.n2req:get(path):getasset()
        end
        local req = libx.Assets.LoadAssetAsync(path, type)
        local task = ETTask_1Object.Create(true)

        req.completed = function (x)
          task:SetResult(x:getasset())
        end
        this.n2req:set(path, req)
        return async:Await(task)
      end, nil, this, path, type)
    end
    LoadAsset = function (this, path, type)
      if this.n2req:ContainsKey(path) then
        return this.n2req:get(path):getasset()
      end
      local req = libx.Assets.LoadAsset(path, type)
      this.n2req:set(path, req)
      return req:getasset()
    end
    UnLoadAsset = function (this, path)
      if this.n2req:ContainsKey(path) then
        this.n2req:get(path):Release()
        this.n2req:RemoveKey(path)
        ET.Log.Debug("[Unload]" .. path)
      end
    end
    GetAllAssetPaths = function (this)
      local rets = nil
      local files = libx.Assets.GetAllAssetPaths()



      local ArrayString = System.Array(System.String)
      rets = ArrayString:new(files.Length)
      for i = 0, files.Length - 1 do
       rets[i] = files[i]
      end


      --var len = ETCold.ArrayHelper.GetLength(files);
      --for (int i = 0; i < len; i++)
      --{
      --   var str = ETCold.ArrayHelper.GetStringItem(files, i);

      --}

      return rets
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      Dispose = Dispose,
      LoadSceneAsync = LoadSceneAsync,
      LoadAssetAsync = LoadAssetAsync,
      LoadAsset = LoadAsset,
      UnLoadAsset = UnLoadAsset,
      GetAllAssetPaths = GetAllAssetPaths,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Instance", 0xE, class }
          },
          fields = {
            { "n2req", 0x1, System.Dictionary(System.String, out.libx.AssetRequest) }
          },
          methods = {
            { "Awake", 0x6, Awake },
            { "Dispose", 0x6, Dispose },
            { "GetAllAssetPaths", 0x86, GetAllAssetPaths, System.Array(System.String) },
            { "LoadAsset", 0x286, LoadAsset, System.String, System.Type, out.UnityEngine.Object },
            { "LoadAssetAsync", 0x286, LoadAssetAsync, System.String, System.Type, out.ET.ETTask_1(out.UnityEngine.Object) },
            { "LoadSceneAsync", 0x286, LoadSceneAsync, System.String, System.Boolean, out.libx.AssetRequest },
            { "UnLoadAsset", 0x106, UnLoadAsset, System.String }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
