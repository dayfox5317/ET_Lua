-- Generated by CSharp.lua Compiler
local System = System
local ETCold = ETCold
local SystemIO = System.IO
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("MessageSerializeHelper", function (namespace)
    local DeserializeFrom, SerializeTo, GetStream, MessageToStream, MessageToStream1
    DeserializeFrom = function (opcode, type, memoryStream)
      if opcode < 40000 --[[MessageSerializeHelper.PbMaxOpcode]] then
        return ET.ProtobufHelper.FromStream(type, memoryStream)
      end

      if opcode >= 51000 --[[MessageSerializeHelper.JsonMinOpcode]] then
        return ETCold.JsonHelper.FromJson(type, ETCold.ByteHelper.ToStr(memoryStream:GetBuffer(), System.toInt32(memoryStream:getPosition()), System.toInt32(memoryStream:getLength() - memoryStream:getPosition())))
      end
      System.throw(System.Exception("client no message: " .. opcode))
    end
    SerializeTo = function (opcode, obj, memoryStream)
      if opcode < 40000 --[[MessageSerializeHelper.PbMaxOpcode]] then
        ET.ProtobufHelper.ToStream(obj, memoryStream)
        return
      end

      if opcode >= 51000 --[[MessageSerializeHelper.JsonMinOpcode]] then
        local s = ETCold.JsonHelper.ToJson(obj)
        local bytes = ET.StringHelper.ToUtf8(s)
        memoryStream:Write(bytes, 0, #bytes)
        return
      end
      System.throw(System.Exception("client no message: " .. opcode))
    end
    GetStream = function (count)
      local stream
      if count > 0 then
        stream = SystemIO.MemoryStream(count)
      else
        stream = SystemIO.MemoryStream()
      end

      return stream
    end
    MessageToStream = function (message, count)
      local stream = GetStream(2 --[[Packet.OpcodeLength]] + count)

      local opcode = ET.OpcodeTypeComponent.Instance:GetOpcode(message:GetType())

      stream:Seek(2 --[[Packet.OpcodeLength]], SystemIO.SeekOrigin.Begin)
      stream:SetLength(2 --[[Packet.OpcodeLength]])

      ETCold.StreamHelper.WriteToUshort(stream, 0, opcode)
      -- stream.GetBuffer().WriteUShortTo(0, opcode);

      SerializeTo(opcode, message, stream)

      stream:Seek(0, SystemIO.SeekOrigin.Begin)
      return System.ValueTuple(opcode, stream)
    end
    MessageToStream1 = function (actorId, message, count)
      local actorSize = 8 --[[sizeof (long)]]
      local stream = GetStream(actorSize + 2 --[[Packet.OpcodeLength]] + count)

      local opcode = ET.OpcodeTypeComponent.Instance:GetOpcode(message:GetType())

      stream:Seek(actorSize + 2 --[[Packet.OpcodeLength]], SystemIO.SeekOrigin.Begin)
      stream:SetLength(actorSize + 2 --[[Packet.OpcodeLength]])

      -- 写入actorId
      ETCold.ByteHelper.WriteLongTo(stream:GetBuffer(), 0, actorId)
      ETCold.ByteHelper.WriteUShortTo(stream:GetBuffer(), actorSize, opcode)

      SerializeTo(opcode, message, stream)

      stream:Seek(0, SystemIO.SeekOrigin.Begin)
      return System.ValueTuple(opcode, stream)
    end
    return {
      DeserializeFrom = DeserializeFrom,
      SerializeTo = SerializeTo,
      GetStream = GetStream,
      MessageToStream = MessageToStream,
      MessageToStream1 = MessageToStream1,
      __metadata__ = function (out)
        return {
          methods = {
            { "DeserializeFrom", 0x38E, DeserializeFrom, System.UInt16, System.Type, System.IO.MemoryStream, System.Object },
            { "GetStream", 0x18E, GetStream, System.Int32, System.IO.MemoryStream },
            { "MessageToStream", 0x28E, MessageToStream, System.Object, System.Int32, System.ValueTuple },
            { "MessageToStream", 0x38E, MessageToStream1, System.Int64, System.Object, System.Int32, System.ValueTuple },
            { "SerializeTo", 0x30E, SerializeTo, System.UInt16, System.Object, System.IO.MemoryStream }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
