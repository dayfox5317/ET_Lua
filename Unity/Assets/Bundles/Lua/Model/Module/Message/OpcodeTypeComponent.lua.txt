-- Generated by CSharp.lua Compiler
local System = System
local DictTypeType = System.Dictionary(System.Type, System.Type)
local HashSetUInt16 = System.HashSet(System.UInt16)
local DictTypeUInt16 = System.Dictionary(System.Type, System.UInt16)
local DictUInt16Type = System.Dictionary(System.UInt16, System.Type)
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("OpcodeTypeComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.OpcodeTypeComponent.Instance = self
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.OpcodeTypeComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.OpcodeTypeComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("OpcodeTypeComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.OpcodeTypeComponent.Instance = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.OpcodeTypeComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.OpcodeTypeComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("OpcodeTypeComponent", function (namespace)
    local Awake, IsOutrActorMessage, GetOpcode, GetType1, GetResponseType, class, __ctor__
    __ctor__ = function (this)
      this.outrActorMessage = HashSetUInt16()
      this.opcodeTypes = DictUInt16Type()
      this.typeOpcodes = DictTypeUInt16()
      this.requestResponse = DictTypeType()
      ET.Entity.__ctor__(this)
    end
    Awake = function (this)
      this.opcodeTypes:Clear()
      this.typeOpcodes:Clear()
      this.requestResponse:Clear()

      local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.MessageAttribute))
      for _, type in System.each(types) do
        local continue
        repeat
          local attrs = type:GetCustomAttributes(System.typeof(ET.MessageAttribute), false)
          if #attrs == 0 then
            continue = true
            break
          end

          local messageAttribute = System.as(attrs:get(0), ET.MessageAttribute)
          if messageAttribute == nil then
            continue = true
            break
          end


          this.opcodeTypes:AddKeyValue(messageAttribute.Opcode, type)
          this.typeOpcodes:AddKeyValue(type, messageAttribute.Opcode)

          if ET.OpcodeHelper.IsOuterMessage(messageAttribute.Opcode) and System.typeof(ET.IActorMessage):IsAssignableFrom(type) then
            this.outrActorMessage:Add(messageAttribute.Opcode)
          end

          -- 检查request response
          if System.typeof(ET.IRequest):IsAssignableFrom(type) then
            if System.typeof(ET.IActorLocationMessage):IsAssignableFrom(type) then
              this.requestResponse:AddKeyValue(type, System.typeof(ET.ActorResponse))
              continue = true
              break
            end

            attrs = type:GetCustomAttributes(System.typeof(ET.ResponseTypeAttribute), false)
            if #attrs == 0 then
              ET.Log.Error("not found responseType: " .. System.toString(type))
              continue = true
              break
            end

            local responseTypeAttribute = System.as(attrs:get(0), ET.ResponseTypeAttribute)
            this.requestResponse:AddKeyValue(type, responseTypeAttribute.Type)
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    IsOutrActorMessage = function (this, opcode)
      return this.outrActorMessage:Contains(opcode)
    end
    GetOpcode = function (this, type)
      return this.typeOpcodes:get(type)
    end
    GetType1 = function (this, opcode)
      return this.opcodeTypes:get(opcode)
    end
    GetResponseType = function (this, request)
      local default, response = this.requestResponse:TryGetValue(request)
      if not default then
        System.throw(System.Exception("not found response type, request type: " .. request:GetType():getName()))
      end
      return response
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      IsOutrActorMessage = IsOutrActorMessage,
      GetOpcode = GetOpcode,
      GetType1 = GetType1,
      GetResponseType = GetResponseType,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "Instance", 0xE, class },
            { "opcodeTypes", 0x1, System.Dictionary(System.UInt16, System.Type) },
            { "outrActorMessage", 0x1, System.HashSet(System.UInt16) },
            { "requestResponse", 0x1, System.Dictionary(System.Type, System.Type) },
            { "typeOpcodes", 0x1, System.Dictionary(System.Type, System.UInt16) }
          },
          methods = {
            { "Awake", 0x6, Awake },
            { "GetOpcode", 0x186, GetOpcode, System.Type, System.UInt16 },
            { "GetResponseType", 0x186, GetResponseType, System.Type, System.Type },
            { "GetType", 0x186, GetType1, System.UInt16, System.Type },
            { "IsOutrActorMessage", 0x186, IsOutrActorMessage, System.UInt16, System.Boolean }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
