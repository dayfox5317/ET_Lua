-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local ET = ET
local ET
local ETSession
local DictInt32RpcInfo
local ETTask_1IResponse
System.import(function (out)
  ET = out.ET
  ETSession = ET.Session
  DictInt32RpcInfo = System.Dictionary(System.Int32, ETSession.RpcInfo)
  ETTask_1IResponse = ET.ETTask_1(ET.IResponse)
end)
System.namespace("ET", function (namespace)
  namespace.class("SessionAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, aService)
      self:Awake(aService)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_2(out.ET.Session, out.ET.AService)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x206, Awake, out.ET.Session, out.ET.AService }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("Session", function (namespace)
    local RpcId, Awake, Dispose, OnRead, Call, Call1, Reply, Send, 
    Send1, Send2, class, __ctor__
    namespace.struct("RpcInfo", function (namespace)
      local __ctor1__, __ctor2__
      __ctor1__ = function (this)
      end
      __ctor2__ = function (this, request)
        this.Request = request
        this.Tcs = ETTask_1IResponse.Create(true)
      end
      return {
        __ctor__ = {
          __ctor1__,
          __ctor2__
        },
        __metadata__ = function (out)
          return {
            fields = {
              { "Request", 0x6, out.ET.IRequest },
              { "Tcs", 0x6, out.ET.ETTask_1(out.ET.IResponse) }
            },
            methods = {
              { ".ctor", 0x106, __ctor2__, out.ET.IRequest }
            },
            class = { 0x1 }
          }
        end
      }
    end)
    __ctor__ = function (this)
      this.requestCallbacks = DictInt32RpcInfo()
      System.base(this).__ctor__(this)
    end
    RpcId = 0
    Awake = function (this, aService)
      this.AService = aService
      local timeNow = ET.TimeHelper.ClientNow()
      this.LastRecvTime = timeNow
      this.LastSendTime = timeNow

      this.requestCallbacks:Clear()

      ET.Log.Info("session create: zone: " .. ET.SceneHelper.DomainZone(this) .. " id: " .. this.Id .. " " .. timeNow .. " ")
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      local zone = ET.SceneHelper.DomainZone(this)
      local id = this.Id

      System.base(this).Dispose(this)

      this.AService:RemoveChannel(this.Id)

      for _, responseCallback in System.each(Linq.ToArray(this.requestCallbacks:getValues())) do
        responseCallback.Tcs:SetException(ET.RpcException(this.Error, "session dispose: " .. id .. " " .. System.toString(this.RemoteAddress)))
      end

      ET.Log.Info("session dispose: " .. System.toString(this.RemoteAddress) .. " zone: " .. zone .. " id: " .. id .. " ErrorCode: " .. this.Error .. ", please see ErrorCode.cs! " .. ET.TimeHelper.ClientNow())

      this.requestCallbacks:Clear()
    end
    OnRead = function (this, opcode, response)
      ET.OpcodeHelper.LogMsg(ET.SceneHelper.DomainZone(this), opcode, response)

      local default, action = this.requestCallbacks:TryGetValue(response:getRpcId())
      if not default then
        return
      end

      this.requestCallbacks:RemoveKey(response:getRpcId())
      if ET.ErrorCode.IsRpcNeedThrowException(response:getError()) then
        action.Tcs:SetException(System.Exception("Rpc error, request: " .. System.toString(action.Request) .. " response: " .. System.toString(response)))
        return
      end
      action.Tcs:SetResult(response)
    end
    Call = function (this, request, cancellationToken)
      return System.async(function (async, this, request, cancellationToken)
        local default = RpcId + 1
        RpcId = default
        local rpcId = default
        local rpcInfo = System.new(class.RpcInfo, 2, request)
        this.requestCallbacks:set(rpcId, rpcInfo)
        request:setRpcId(rpcId)

        Send(this, request)

        local function CancelAction() 
          local default, action = this.requestCallbacks:TryGetValue(rpcId)
          if not default then
            return
          end

          this.requestCallbacks:RemoveKey(rpcId)
          local responseType = ET.OpcodeTypeComponent.Instance:GetResponseType(action.Request:GetType())
          local response = System.cast(ET.IResponse, System.Activator.CreateInstance(responseType))
          response:setError(200001 --[[ErrorCode.ERR_Cancel]])
          action.Tcs:SetResult(response)
        end

        local ret
        System.try(function ()
          local default = cancellationToken
          if default ~= nil then
            default:Add(CancelAction)
          end
          ret = async:Await(rpcInfo.Tcs)
        end, nil, function ()
          local default = cancellationToken
          if default ~= nil then
            default:Remove(CancelAction)
          end
        end)
        return ret
      end, nil, this, request, cancellationToken)
    end
    Call1 = function (this, request)
      return System.async(function (async, this, request)
        local default = RpcId + 1
        RpcId = default
        local rpcId = default
        local rpcInfo = System.new(class.RpcInfo, 2, request)
        this.requestCallbacks:set(rpcId, rpcInfo)
        request:setRpcId(rpcId)
        Send(this, request)
        return async:Await(rpcInfo.Tcs)
      end, nil, this, request)
    end
    Reply = function (this, message)
      Send(this, message)
    end
    Send = function (this, message)
      repeat
        local default = this.AService.ServiceType
        if default == ET.ServiceType.Inner then
          local opcode, stream = ET.MessageSerializeHelper.MessageToStream1(0, message, 0):Deconstruct()
          ET.OpcodeHelper.LogMsg(ET.SceneHelper.DomainZone(this), opcode, message)
          Send2(this, 0, stream)
          break
        elseif default == ET.ServiceType.Outer then
          local opcode, stream = ET.MessageSerializeHelper.MessageToStream(message, 0):Deconstruct()
          ET.OpcodeHelper.LogMsg(ET.SceneHelper.DomainZone(this), opcode, message)
          Send2(this, 0, stream)
          break
        end
      until 1
    end
    Send1 = function (this, actorId, message)
      local opcode, stream = ET.MessageSerializeHelper.MessageToStream1(actorId, message, 0):Deconstruct()
      ET.OpcodeHelper.LogMsg(ET.SceneHelper.DomainZone(this), opcode, message)
      Send2(this, actorId, stream)
    end
    Send2 = function (this, actorId, memoryStream)
      this.LastSendTime = ET.TimeHelper.ClientNow()
      this.AService:SendStream(this.Id, actorId, memoryStream)
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      LastRecvTime = 0,
      LastSendTime = 0,
      Error = 0,
      Awake = Awake,
      Dispose = Dispose,
      OnRead = OnRead,
      Call = Call,
      Call1 = Call1,
      Reply = Reply,
      Send = Send,
      Send1 = Send1,
      Send2 = Send2,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "AService", 0x6, out.ET.AService },
            { "requestCallbacks", 0x1, System.Dictionary(System.Int32, out.ET.Session.RpcInfo) }
          },
          properties = {
            { "Error", 0x6, System.Int32 },
            { "LastRecvTime", 0x6, System.Int64 },
            { "LastSendTime", 0x6, System.Int64 },
            { "RemoteAddress", 0x6, System.Net.IPEndPoint },
            { "RpcId", 0x9, System.Int32 }
          },
          methods = {
            { "Awake", 0x106, Awake, out.ET.AService },
            { "Call", 0x286, Call, out.ET.IRequest, out.ET.ETCancellationToken, out.ET.ETTask_1(out.ET.IResponse) },
            { "Call", 0x186, Call1, out.ET.IRequest, out.ET.ETTask_1(out.ET.IResponse) },
            { "Dispose", 0x6, Dispose },
            { "OnRead", 0x206, OnRead, System.UInt16, out.ET.IResponse },
            { "Reply", 0x106, Reply, out.ET.IResponse },
            { "Send", 0x106, Send, out.ET.IMessage },
            { "Send", 0x206, Send1, System.Int64, out.ET.IMessage },
            { "Send", 0x206, Send2, System.Int64, System.IO.MemoryStream }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
