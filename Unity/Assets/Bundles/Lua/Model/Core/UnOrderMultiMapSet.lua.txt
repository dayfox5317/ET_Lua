-- Generated by CSharp.lua Compiler
local System = System
System.namespace("ET", function (namespace)
  namespace.class("UnOrderMultiMapSet_2", function (namespace)
    return function (T, K)
      local get, GetDictionary, Add, Remove, Remove1, FetchList, RecycleList, Contains, 
      ContainsKey, Clear, getCount, __ctor__
      local HashSetK = System.HashSet(K)
      local DictTHashSetK = System.Dictionary(T, HashSetK)
      local QueueHashSetK = System.Queue(HashSetK)
      __ctor__ = function (this)
        this.dictionary = DictTHashSetK()
        this.queue = QueueHashSetK()
      end
      get = function (this, t)
        local set
        local default
        default, set = this.dictionary:TryGetValue(t)
        if not default then
          set = HashSetK()
        end
        return set
      end
      GetDictionary = function (this)
        return this.dictionary
      end
      Add = function (this, t, k)
        local set
        local _
        _, set = this.dictionary:TryGetValue(t)
        if set == nil then
          set = FetchList(this)
          this.dictionary:set(t, set)
        end
        set:Add(k)
      end
      Remove = function (this, t, k)
        local set
        local _
        _, set = this.dictionary:TryGetValue(t)
        if set == nil then
          return false
        end
        if not set:Remove(k) then
          return false
        end
        if set:getCount() == 0 then
          RecycleList(this, set)
          this.dictionary:RemoveKey(t)
        end
        return true
      end
      Remove1 = function (this, t)
        local set = nil
        local _
        _, set = this.dictionary:TryGetValue(t)
        if set ~= nil then
          RecycleList(this, set)
        end
        return this.dictionary:RemoveKey(t)
      end
      FetchList = function (this)
        if #this.queue > 0 then
          local set = this.queue:Dequeue()
          set:Clear()
          return set
        end
        return HashSetK()
      end
      RecycleList = function (this, set)
        -- 防止暴涨
        if #this.queue > 100 then
          return
        end
        set:Clear()
        this.queue:Enqueue(set)
      end
      Contains = function (this, t, k)
        local set
        local _
        _, set = this.dictionary:TryGetValue(t)
        if set == nil then
          return false
        end
        return set:Contains(k)
      end
      ContainsKey = function (this, t)
        return this.dictionary:ContainsKey(t)
      end
      Clear = function (this)
        this.dictionary:Clear()
      end
      getCount = function (this)
        local count = 0
        for _, kv in System.each(this.dictionary) do
          count = count + kv.Value:getCount()
        end
        return count
      end
      return {
        get = get,
        GetDictionary = GetDictionary,
        Add = Add,
        Remove = Remove,
        Remove1 = Remove1,
        Contains = Contains,
        ContainsKey = ContainsKey,
        Clear = Clear,
        getCount = getCount,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "dictionary", 0x1, System.Dictionary(T, System.HashSet(K)) },
              { "queue", 0x1, System.Queue(System.HashSet(K)) }
            },
            methods = {
              { "Add", 0x206, Add, T, K },
              { "Clear", 0x6, Clear },
              { "Contains", 0x286, Contains, T, K, System.Boolean },
              { "ContainsKey", 0x186, ContainsKey, T, System.Boolean },
              { "FetchList", 0x81, FetchList, System.HashSet(K) },
              { "GetDictionary", 0x86, GetDictionary, System.Dictionary(T, System.HashSet(K)) },
              { "RecycleList", 0x101, RecycleList, System.HashSet(K) },
              { "Remove", 0x286, Remove, T, K, System.Boolean },
              { "Remove", 0x186, Remove1, T, System.Boolean }
            },
            properties = {
              { "Count", 0x206, System.Int32, getCount }
            },
            class = { 0x206, T, K }
          }
        end
      }
    end
  end)
end)
