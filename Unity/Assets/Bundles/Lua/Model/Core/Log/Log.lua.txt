-- Generated by CSharp.lua Compiler
local System = System
local ETCold = ETCold
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("Log", function (namespace)
    local getILog, CheckLogLevel, Trace, Debug, Info, TraceInfo, Warning, Error, 
    Error1, Trace1, Warning1, Info1, Debug1, Error2, Console, Console1, 
    class, static
    static = function (this)
      ET.Game.ILog = ETCold.UnityLogger()
    end
    getILog = function ()
      return ET.Game.ILog
    end
    CheckLogLevel = function (level)
      if ET.Game.Options == nil then
        return true
      end

      return ET.Game.Options.LogLevel <= level
    end
    Trace = function (msg)
      if not CheckLogLevel(2 --[[Log.DebugLevel]]) then
        return
      end
      local default = class.DebugCallback
      if default ~= nil then
        default(msg)
      end
      local st = System.StackTrace(1, true)

      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;

      getILog():Trace(msg .. "\n" .. System.toString(st))
    end
    Debug = function (msg)
      if not CheckLogLevel(2 --[[Log.DebugLevel]]) then
        return
      end
      local default = class.DebugCallback
      if default ~= nil then
        default(msg)
      end

      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;

      getILog():Debug(msg)
    end
    Info = function (msg)
      if not CheckLogLevel(3 --[[Log.InfoLevel]]) then
        return
      end

      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;

      getILog():Info(msg)
    end
    TraceInfo = function (msg)
      if not CheckLogLevel(3 --[[Log.InfoLevel]]) then
        return
      end
      local st = System.StackTrace(1, true)

      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;

      getILog():Trace(msg .. "\n" .. System.toString(st))
    end
    Warning = function (msg)
      if not CheckLogLevel(4 --[[Log.WarningLevel]]) then
        return
      end


      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;

      getILog():Warning(msg)
    end
    Error = function (msg)
      local default = class.ErrorCallback
      if default ~= nil then
        default(msg .. "")
      end
      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;
      getILog():Error(msg .. "")
    end
    Error1 = function (e)
      local msg = e:ToString()
      local default = class.ErrorCallback
      if default ~= nil then
        default(msg)
      end

      local info = debug.getinfo(2,"Sl");
                  msg = msg.."\r\n"..info.source..":"..info.currentline;

      getILog():Error(msg)
    end
    Trace1 = function (message, args)
      if not CheckLogLevel(1 --[[Log.TraceLevel]]) then
        return
      end
      local default = class.DebugCallback
      if default ~= nil then
        default(message, args)
      end
      local st = System.StackTrace(1, true)
      getILog():Trace(System.String.Format(message, args) .. "\n" .. System.toString(st))
    end
    Warning1 = function (message, args)
      if not CheckLogLevel(4 --[[Log.WarningLevel]]) then
        return
      end
      getILog():Warning(System.String.Format(message, args))
    end
    Info1 = function (message, args)
      if not CheckLogLevel(3 --[[Log.InfoLevel]]) then
        return
      end
      getILog():Info(System.String.Format(message, args))
    end
    Debug1 = function (message, args)
      if not CheckLogLevel(2 --[[Log.DebugLevel]]) then
        return
      end
      local default = class.DebugCallback
      if default ~= nil then
        default(message, args)
      end
      getILog():Debug(System.String.Format(message, args))
    end
    Error2 = function (message, args)
      local st = System.StackTrace(1, true)
      local s = System.String.Format(message, args) .. '\n' .. System.toString(st)
      local default = class.ErrorCallback
      if default ~= nil then
        default(s)
      end
      getILog():Error(s)
    end
    Console = function (message)
      if ET.Game.Options.Console == 1 then
        System.Console.WriteLine(message)
      end
      getILog():Debug(message)
    end
    Console1 = function (message, args)
      local s = System.String.Format(message, args)
      if ET.Game.Options.Console == 1 then
        System.Console.WriteLine(s)
      end
      getILog():Debug(s)
    end
    class = {
      getILog = getILog,
      CheckLogLevel = CheckLogLevel,
      Trace = Trace,
      Debug = Debug,
      Info = Info,
      TraceInfo = TraceInfo,
      Warning = Warning,
      Error = Error,
      Error1 = Error1,
      Trace1 = Trace1,
      Warning1 = Warning1,
      Info1 = Info1,
      Debug1 = Debug1,
      Error2 = Error2,
      Console = Console,
      Console1 = Console1,
      static = static,
      __metadata__ = function (out)
        return {
          properties = {
            { "ILog", 0x20E, out.ETCold.ILog, getILog }
          },
          methods = {
            { "CheckLogLevel", 0x18E, CheckLogLevel, System.Int32, System.Boolean },
            { "Console", 0x10E, Console, System.String },
            { "Console", 0x20E, Console1, System.String, System.Array(System.Object) },
            { "Debug", 0x10E, Debug, System.String },
            { "Debug", 0x20E, Debug1, System.String, System.Array(System.Object) },
            { "Error", 0x10E, Error, System.String },
            { "Error", 0x10E, Error1, System.Exception },
            { "Error", 0x20E, Error2, System.String, System.Array(System.Object) },
            { "Info", 0x10E, Info, System.String },
            { "Info", 0x20E, Info1, System.String, System.Array(System.Object) },
            { "Trace", 0x10E, Trace, System.String },
            { "Trace", 0x20E, Trace1, System.String, System.Array(System.Object) },
            { "TraceInfo", 0x10E, TraceInfo, System.String },
            { "Warning", 0x10E, Warning, System.String },
            { "Warning", 0x20E, Warning1, System.String, System.Array(System.Object) }
          },
          fields = {
            { "DebugCallback", 0xE, System.Delegate(System.String, System.Array(System.Object), System.Void) },
            { "ErrorCallback", 0xE, System.Delegate(System.String, System.Void) }
          },
          class = { 0xE }
        }
      end
    }
    return class
  end)
end)
