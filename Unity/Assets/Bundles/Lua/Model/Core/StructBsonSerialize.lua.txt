-- Generated by CSharp.lua Compiler
local System = System
local MongoDBBson = MongoDB.Bson
local MongoDBBsonIO = MongoDB.Bson.IO
local MongoDBBsonSerialization = MongoDB.Bson.Serialization
System.namespace("ET", function (namespace)
  namespace.class("StructBsonSerialize_1", function (namespace)
    return function (TValue)
      local Serialize, Deserialize
      Serialize = function (this, context, args, value)
        local nominalType = args:getNominalType()

        local bsonWriter = context:getWriter()

        bsonWriter:WriteStartDocument()

        local fields = nominalType:GetFields(52 --[[BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic]])
        for _, field in System.each(fields) do
          bsonWriter:WriteName(field:getName())
          MongoDBBsonSerialization.BsonSerializer.Serialize(bsonWriter, field:getFieldType(), field:GetValue(value), nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs))
        end

        bsonWriter:WriteEndDocument()
      end
      Deserialize = function (this, context, args)
        --boxing is required for SetValue to work
        local obj = TValue()
        local actualType = args:getNominalType()
        local bsonReader = context:getReader()

        bsonReader:ReadStartDocument()

        while bsonReader:ReadBsonType() ~= MongoDBBson.BsonType.EndOfDocument do
          local name = bsonReader:ReadName(MongoDBBsonIO.Utf8NameDecoder.getInstance())

          local field = actualType:GetField(name)
          if field ~= nil then
            local value = MongoDBBsonSerialization.BsonSerializer.Deserialize(bsonReader, field:getFieldType(), nil)
            field:SetValue(obj, value)
          end
        end

        bsonReader:ReadEndDocument()

        return System.cast(TValue, obj)
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.StructSerializerBase_1(TValue)
          }
        end,
        Serialize = Serialize,
        Deserialize = Deserialize,
        __metadata__ = function (out)
          return {
            methods = {
              { "Deserialize", 0x286, Deserialize, out.MongoDB.Bson.Serialization.BsonDeserializationContext, out.MongoDB.Bson.Serialization.BsonDeserializationArgs, TValue },
              { "Serialize", 0x306, Serialize, out.MongoDB.Bson.Serialization.BsonSerializationContext, out.MongoDB.Bson.Serialization.BsonSerializationArgs, TValue }
            },
            class = { 0x106, TValue }
          }
        end
      }
    end
  end)
end)
