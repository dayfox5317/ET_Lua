-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ET
local HashSetEntity
local DictTypeEntity
local DictInt64Entity
local Pool_1HashSetEntity
local Pool_1DictTypeEntity
local Pool_1DictInt64Entity
System.import(function (out)
  ET = out.ET
  HashSetEntity = System.HashSet(ET.Entity)
  DictTypeEntity = System.Dictionary(System.Type, ET.Entity)
  DictInt64Entity = System.Dictionary(System.Int64, ET.Entity)
  Pool_1HashSetEntity = ET.Pool_1(HashSetEntity)
  Pool_1DictTypeEntity = ET.Pool_1(DictTypeEntity)
  Pool_1DictInt64Entity = ET.Pool_1(DictInt64Entity)
end)
System.namespace("ET", function (namespace)
  namespace.enum("EntityStatus", function ()
    local class
    class = {
      None = 0,
      IsFromPool = 1,
      IsRegister = 2,
      IsComponent = 4,
      IsCreate = 8,
      __metadata__ = function (out)
        return {
          fields = {
            { "IsComponent", 0xE, class },
            { "IsCreate", 0xE, class },
            { "IsFromPool", 0xE, class },
            { "IsRegister", 0xE, class },
            { "None", 0xE, class }
          },
          class = { 0x6, System.FlagsAttribute() }
        }
      end
    }
    return class
  end)

  namespace.class("Entity", function (namespace)
    local Create, CreateWithComponentParent, CreateWithComponentParent1, CreateWithComponentParent2, CreateWithComponentParent3, CreateWithComponentParent4, hashSetPool, dictPool, 
    childrenPool, getIsFromPool, setIsFromPool, getIsRegister, setIsRegister, getIsComponent, setIsComponent, getIsCreate, 
    setIsCreate, getIsDisposed, getParent, setParent, setComponentParent, AfterSetParent, GetParent, getDomain, 
    setDomain, getChildren, AddChild, RemoveChild, AddChildDB, RemoveChildDB, getComponents, Dispose, 
    AddToComponentsDB, RemoveFromComponentsDB, AddToComponent, RemoveFromComponent, GetChild, AddComponent, AddComponent1, AddComponent2, 
    AddComponent3, AddComponent4, AddComponent5, RemoveComponent, RemoveComponent1, RemoveComponent2, GetComponent, GetComponent1, 
    class, static, __ctor__
    static = function (this)
      hashSetPool = Pool_1HashSetEntity()
      dictPool = Pool_1DictTypeEntity()
      childrenPool = Pool_1DictInt64Entity()
    end
    __ctor__ = function (this)
      this.status = ET.EntityStatus.None
      ET.Object.__ctor__(this)
    end
    Create = function (type, isFromPool)
      local component
      if isFromPool then
        component = System.cast(class, ET.ObjectPool.getInstance():Fetch(type))
      else
        component = System.cast(class, System.Activator.CreateInstance(type))
      end
      setIsFromPool(component, isFromPool)
      setIsCreate(component, true)
      component.Id = 0
      return component
    end
    CreateWithComponentParent = function (this, type, isFromPool)
      local component = Create(type, isFromPool)

      component.Id = this.Id
      setComponentParent(component, this)

      ET.EventSystem.getInstance():Awake(component)
      return component
    end
    CreateWithComponentParent1 = function (this, isFromPool, T)
      local type = System.typeof(T)
      local component = Create(type, isFromPool)

      component.Id = this.Id
      setComponentParent(component, this)

      ET.EventSystem.getInstance():Awake(component)
      return System.cast(T, component)
    end
    CreateWithComponentParent2 = function (this, a, isFromPool, T, A)
      local type = System.typeof(T)
      local component = Create(type, isFromPool)

      component.Id = this.Id
      setComponentParent(component, this)

      ET.EventSystem.getInstance():Awake1(component, a, A)
      return System.cast(T, component)
    end
    CreateWithComponentParent3 = function (this, a, b, isFromPool, T, A, B)
      local type = System.typeof(T)
      local component = Create(type, isFromPool)

      component.Id = this.Id
      setComponentParent(component, this)

      ET.EventSystem.getInstance():Awake2(component, a, b, A, B)
      return System.cast(T, component)
    end
    CreateWithComponentParent4 = function (this, a, b, c, isFromPool, T, A, B, C)
      local type = System.typeof(T)
      local component = Create(type, isFromPool)

      component.Id = this.Id
      setComponentParent(component, this)

      ET.EventSystem.getInstance():Awake3(component, a, b, c, A, B, C)
      return System.cast(T, component)
    end
    getIsFromPool = function (this)
      return (System.band(this.status, ET.EntityStatus.IsFromPool)) == ET.EntityStatus.IsFromPool
    end
    setIsFromPool = function (this, value)
      if value then
        this.status = System.bor(this.status, ET.EntityStatus.IsFromPool)
      else
        this.status = System.band(this.status, System.bnot(ET.EntityStatus.IsFromPool))
      end
    end
    getIsRegister = function (this)
      return (System.band(this.status, ET.EntityStatus.IsRegister)) == ET.EntityStatus.IsRegister
    end
    setIsRegister = function (this, value)
      if getIsRegister(this) == value then
        return
      end

      if value then
        this.status = System.bor(this.status, ET.EntityStatus.IsRegister)
      else
        this.status = System.band(this.status, System.bnot(ET.EntityStatus.IsRegister))
      end

      ET.EventSystem.getInstance():RegisterSystem(this, value)
    end
    getIsComponent = function (this)
      return (System.band(this.status, ET.EntityStatus.IsComponent)) == ET.EntityStatus.IsComponent
    end
    setIsComponent = function (this, value)
      if value then
        this.status = System.bor(this.status, ET.EntityStatus.IsComponent)
      else
        this.status = System.band(this.status, System.bnot(ET.EntityStatus.IsComponent))
      end
    end
    getIsCreate = function (this)
      return (System.band(this.status, ET.EntityStatus.IsCreate)) == ET.EntityStatus.IsCreate
    end
    setIsCreate = function (this, value)
      if value then
        this.status = System.bor(this.status, ET.EntityStatus.IsCreate)
      else
        this.status = System.band(this.status, System.bnot(ET.EntityStatus.IsCreate))
      end
    end
    getIsDisposed = function (this)
      return this.InstanceId == 0
    end
    getParent = function (this)
      return this.parent
    end
    setParent = function (this, value)
      if value == nil then
        System.throw(System.Exception("cant set parent null: " .. this:GetType():getName()))
      end

      if this.parent ~= nil then
        -- parent相同，不设置
        if this.parent.InstanceId == value.InstanceId then
          ET.Log.Error("重复设置了Parent: " .. this:GetType():getName() .. " parent: " .. this.parent:GetType():getName())
          return
        end

        RemoveChild(this.parent, this)

        this.parent = value
        AddChild(this.parent, this)

        setDomain(this, this.parent.domain)
      else
        this.parent = value
        AddChild(this.parent, this)

        setIsComponent(this, false)

        AfterSetParent(this)
      end
    end
    setComponentParent = function (this, value)
      if this.parent ~= nil then
        System.throw(System.Exception("Component parent is not null: " .. this:GetType():getName()))
      end

      this.parent = value

      setIsComponent(this, true)

      AfterSetParent(this)
    end
    AfterSetParent = function (this)
      setDomain(this, this.parent.domain)

    end
    GetParent = function (this, T)
      return System.as(getParent(this), T)
    end
    getDomain = function (this)
      return this.domain
    end
    setDomain = function (this, value)
      if value == nil then
        return
      end

      local preDomain = this.domain
      this.domain = value

      --if (!(this.domain is Scene))
      --{
      --	throw new Exception($"domain is not scene: {this.GetType().Name}");
      --}

      if preDomain == nil then
        this.InstanceId = ET.IdGenerater.Instance:GenerateInstanceId()

        -- 反序列化出来的需要设置父子关系
        if not getIsCreate(this) then
          if this.componentsDB ~= nil then
            for _, component in System.each(this.componentsDB) do
              setIsComponent(component, true)
              getComponents(this):AddKeyValue(component:GetType(), component)
              component.parent = this
            end
          end

          if this.childrenDB ~= nil then
            for _, child in System.each(this.childrenDB) do
              setIsComponent(child, false)
              getChildren(this):AddKeyValue(child.Id, child)
              child.parent = this
            end
          end
        end
      end

      -- 是否注册跟parent一致
      if this.parent ~= nil then
        setIsRegister(this, getIsRegister(getParent(this)))
      end

      -- 递归设置孩子的Domain
      if this.children ~= nil then
        for _, entity in System.each(this.children:getValues()) do
          setDomain(entity, this.domain)
        end
      end

      if this.components ~= nil then
        for _, component in System.each(this.components:getValues()) do
          setDomain(component, this.domain)
        end
      end

      if preDomain == nil and not getIsCreate(this) then
        ET.EventSystem.getInstance():Deserialize(this)
      end
    end
    getChildren = function (this)
      local default = this.children
      if default == nil then
        this.children = childrenPool:Fetch()
        default = this.children
      end
      return default
    end
    AddChild = function (this, entity)
      getChildren(this):AddKeyValue(entity.Id, entity)
      AddChildDB(this, entity)
    end
    RemoveChild = function (this, entity)
      if this.children == nil then
        return
      end

      this.children:RemoveKey(entity.Id)

      if this.children:getCount() == 0 then
        childrenPool:Recycle(this.children)
        this.children = nil
      end

      RemoveChildDB(this, entity)
    end
    AddChildDB = function (this, entity)
      if not (System.is(entity, ET.ISerializeToEntity)) then
        return
      end

      if this.childrenDB == nil then
        this.childrenDB = hashSetPool:Fetch()
      end

      this.childrenDB:Add(entity)
    end
    RemoveChildDB = function (this, entity)
      if not (System.is(entity, ET.ISerializeToEntity)) then
        return
      end

      if this.childrenDB == nil then
        return
      end

      this.childrenDB:Remove(entity)

      if this.childrenDB:getCount() == 0 then
        if getIsFromPool(this) then
          hashSetPool:Recycle(this.childrenDB)
          this.childrenDB = nil
        end
      end
    end
    getComponents = function (this)
      local default = this.components
      if default == nil then
        this.components = dictPool:Fetch()
        default = this.components
      end
      return default
    end
    Dispose = function (this)
      if getIsDisposed(this) then
        return
      end

      ET.EventSystem.getInstance():Remove(this.InstanceId)
      this.InstanceId = 0

      -- 清理Component
      if this.components ~= nil then
        for _, kv in System.each(this.components) do
          kv.Value:Dispose()
        end

        this.components:Clear()
        dictPool:Recycle(this.components)
        this.components = nil

        -- 从池中创建的才需要回到池中,从db中不需要回收
        if this.componentsDB ~= nil then
          this.componentsDB:Clear()

          if getIsFromPool(this) then
            hashSetPool:Recycle(this.componentsDB)
            this.componentsDB = nil
          end
        end
      end

      -- 清理Children
      if this.children ~= nil then
        for _, child in System.each(this.children:getValues()) do
          child:Dispose()
        end

        this.children:Clear()
        childrenPool:Recycle(this.children)
        this.children = nil

        if this.childrenDB ~= nil then
          this.childrenDB:Clear()
          -- 从池中创建的才需要回到池中,从db中不需要回收
          if getIsFromPool(this) then
            hashSetPool:Recycle(this.childrenDB)
            this.childrenDB = nil
          end
        end
      end

      -- 触发Destroy事件
      ET.EventSystem.getInstance():Destroy(this)

      this.domain = nil

      if this.parent ~= nil and not getIsDisposed(this.parent) then
        if getIsComponent(this) then
          RemoveComponent1(this.parent, this)
        else
          RemoveChild(this.parent, this)
        end
      end

      this.parent = nil

      if getIsFromPool(this) then
        ET.ObjectPool.getInstance():Recycle(this)
      else
        ET.Object.Dispose(this)
      end

      this.status = ET.EntityStatus.None
    end
    AddToComponentsDB = function (this, component)
      if this.componentsDB == nil then
        this.componentsDB = hashSetPool:Fetch()
      end

      this.componentsDB:Add(component)
    end
    RemoveFromComponentsDB = function (this, component)
      if this.componentsDB == nil then
        return
      end

      this.componentsDB:Remove(component)
      if this.componentsDB:getCount() == 0 and getIsFromPool(this) then
        hashSetPool:Recycle(this.componentsDB)
        this.componentsDB = nil
      end
    end
    AddToComponent = function (this, type, component)
      if this.components == nil then
        this.components = dictPool:Fetch()
      end

      this.components:AddKeyValue(type, component)

      if System.is(component, ET.ISerializeToEntity) then
        AddToComponentsDB(this, component)
      end
    end
    RemoveFromComponent = function (this, type, component)
      if this.components == nil then
        return
      end

      this.components:RemoveKey(type)

      if this.components:getCount() == 0 and getIsFromPool(this) then
        dictPool:Recycle(this.components)
        this.components = nil
      end

      RemoveFromComponentsDB(this, component)
    end
    GetChild = function (this, id, K)
      if this.children == nil then
        return nil
      end
      local _, child = this.children:TryGetValue(id)
      return System.as(child, K)
    end
    AddComponent = function (this, component)
      local type = component:GetType()
      if this.components ~= nil and this.components:ContainsKey(type) then
        System.throw(System.Exception("entity already has component: " .. type:getFullName()))
      end

      setComponentParent(component, this)

      AddToComponent(this, type, component)

      return component
    end
    AddComponent1 = function (this, type)
      if this.components ~= nil and this.components:ContainsKey(type) then
        System.throw(System.Exception("entity already has component: " .. type:getFullName()))
      end

      local component = CreateWithComponentParent(this, type, true)

      AddToComponent(this, type, component)

      return component
    end
    AddComponent2 = function (this, K)
      local type = System.typeof(K)
      if this.components ~= nil and this.components:ContainsKey(type) then
        System.throw(System.Exception("entity already has component: " .. type:getFullName()))
      end

      local component = CreateWithComponentParent1(this, true, K)

      AddToComponent(this, type, component)

      return component
    end
    AddComponent3 = function (this, p1, K, P1)
      local type = System.typeof(K)
      if this.components ~= nil and this.components:ContainsKey(type) then
        System.throw(System.Exception("entity already has component: " .. type:getFullName()))
      end

      local component = CreateWithComponentParent2(this, p1, true, K, P1)

      AddToComponent(this, type, component)

      return component
    end
    AddComponent4 = function (this, p1, p2, K, P1, P2)
      local type = System.typeof(K)
      if this.components ~= nil and this.components:ContainsKey(type) then
        System.throw(System.Exception("entity already has component: " .. type:getFullName()))
      end

      local component = CreateWithComponentParent3(this, p1, p2, true, K, P1, P2)

      AddToComponent(this, type, component)

      return component
    end
    AddComponent5 = function (this, p1, p2, p3, K, P1, P2, P3)
      local type = System.typeof(K)
      if this.components ~= nil and this.components:ContainsKey(type) then
        System.throw(System.Exception("entity already has component: " .. type:getFullName()))
      end

      local component = CreateWithComponentParent4(this, p1, p2, p3, true, K, P1, P2, P3)

      AddToComponent(this, type, component)

      return component
    end
    RemoveComponent = function (this, K)
      if getIsDisposed(this) then
        return
      end

      if this.components == nil then
        return
      end

      local type = System.typeof(K)
      local c = this:GetComponent1(type)
      if c == nil then
        return
      end

      RemoveFromComponent(this, type, c)
      c:Dispose()
    end
    RemoveComponent1 = function (this, component)
      if getIsDisposed(this) then
        return
      end

      if this.components == nil then
        return
      end

      local type = component:GetType()
      local c = this:GetComponent1(component:GetType())
      if c == nil then
        return
      end

      if c.InstanceId ~= component.InstanceId then
        return
      end

      RemoveFromComponent(this, type, c)
      c:Dispose()
    end
    RemoveComponent2 = function (this, type)
      if getIsDisposed(this) then
        return
      end

      local c = this:GetComponent1(type)
      if c == nil then
        return
      end

      RemoveFromComponent(this, type, c)
      c:Dispose()
    end
    GetComponent = function (this, K)
      if this.components == nil then
        return nil
      end

      local component
      local default
      default, component = this.components:TryGetValue(System.typeof(K))
      if not default then
        return nil
      end

      return System.cast(K, component)
    end
    GetComponent1 = function (this, type)
      if this.components == nil then
        return nil
      end

      local component
      local default
      default, component = this.components:TryGetValue(type)
      if not default then
        return nil
      end

      return component
    end
    class = {
      base = function (out)
        return {
          out.ET.Object
        }
      end,
      Create = Create,
      InstanceId = 0,
      getIsFromPool = getIsFromPool,
      setIsFromPool = setIsFromPool,
      getIsRegister = getIsRegister,
      setIsRegister = setIsRegister,
      getIsCreate = getIsCreate,
      setIsCreate = setIsCreate,
      getIsDisposed = getIsDisposed,
      getParent = getParent,
      setParent = setParent,
      GetParent = GetParent,
      Id = 0,
      getDomain = getDomain,
      setDomain = setDomain,
      getChildren = getChildren,
      getComponents = getComponents,
      Dispose = Dispose,
      GetChild = GetChild,
      AddComponent = AddComponent,
      AddComponent1 = AddComponent1,
      AddComponent2 = AddComponent2,
      AddComponent3 = AddComponent3,
      AddComponent4 = AddComponent4,
      AddComponent5 = AddComponent5,
      RemoveComponent = RemoveComponent,
      RemoveComponent1 = RemoveComponent1,
      RemoveComponent2 = RemoveComponent2,
      GetComponent = GetComponent,
      GetComponent1 = GetComponent1,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { ".ctor", 0x3, nil },
            { "AddChild", 0x101, AddChild, class },
            { "AddChildDB", 0x101, AddChildDB, class },
            { "AddComponent", 0x40386, AddComponent5, function (K, P1, P2, P3) return P1, P2, P3, K end },
            { "AddComponent", 0x30286, AddComponent4, function (K, P1, P2) return P1, P2, K end },
            { "AddComponent", 0x20186, AddComponent3, function (K, P1) return P1, K end },
            { "AddComponent", 0x10086, AddComponent2, function (K) return K end },
            { "AddComponent", 0x186, AddComponent1, System.Type, class },
            { "AddComponent", 0x186, AddComponent, class, class },
            { "AddToComponent", 0x201, AddToComponent, System.Type, class },
            { "AddToComponentsDB", 0x101, AddToComponentsDB, class },
            { "AfterSetParent", 0x1, AfterSetParent },
            { "Create", 0x28E, Create, System.Type, System.Boolean, class },
            { "CreateWithComponentParent", 0x30381, CreateWithComponentParent3, function (T, A, B) return A, B, System.Boolean, T end },
            { "CreateWithComponentParent", 0x281, CreateWithComponentParent, System.Type, System.Boolean, class },
            { "CreateWithComponentParent", 0x10181, CreateWithComponentParent1, function (T) return System.Boolean, T end },
            { "CreateWithComponentParent", 0x20281, CreateWithComponentParent2, function (T, A) return A, System.Boolean, T end },
            { "CreateWithComponentParent", 0x40481, CreateWithComponentParent4, function (T, A, B, C) return A, B, C, System.Boolean, T end },
            { "Dispose", 0x6, Dispose },
            { "GetChild", 0x10186, GetChild, function (K) return System.Int64, K end },
            { "GetComponent", 0x10086, GetComponent, function (K) return K end },
            { "GetComponent", 0x186, GetComponent1, System.Type, class },
            { "GetParent", 0x10086, GetParent, function (T) return T end },
            { "RemoveChild", 0x101, RemoveChild, class },
            { "RemoveChildDB", 0x101, RemoveChildDB, class },
            { "RemoveComponent", 0x10006, RemoveComponent, function (K) return end },
            { "RemoveComponent", 0x106, RemoveComponent1, class },
            { "RemoveComponent", 0x106, RemoveComponent2, System.Type },
            { "RemoveFromComponent", 0x201, RemoveFromComponent, System.Type, class },
            { "RemoveFromComponentsDB", 0x101, RemoveFromComponentsDB, class }
          },
          fields = {
            { "children", 0x1, System.Dictionary(System.Int64, out.ET.Entity), out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "childrenDB", 0x1, System.HashSet(out.ET.Entity), out.MongoDB.Bson.Serialization.Attributes.BsonElementAttribute("Children"), out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfNullAttribute() },
            { "childrenPool", 0x9, out.ET.Pool_1(System.Dictionary(System.Int64, out.ET.Entity)) },
            { "components", 0x1, System.Dictionary(System.Type, out.ET.Entity), out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "componentsDB", 0x1, System.HashSet(out.ET.Entity), out.MongoDB.Bson.Serialization.Attributes.BsonElementAttribute("C"), out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfNullAttribute() },
            { "dictPool", 0x9, out.ET.Pool_1(System.Dictionary(System.Type, out.ET.Entity)) },
            { "domain", 0x3, class, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "hashSetPool", 0x9, out.ET.Pool_1(System.HashSet(out.ET.Entity)) },
            { "parent", 0x3, class, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "status", 0x1, out.ET.EntityStatus, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() }
          },
          properties = {
            { "Children", 0x206, System.Dictionary(System.Int64, out.ET.Entity), getChildren, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "ComponentParent", 0x301, class, setComponentParent, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "Components", 0x206, System.Dictionary(System.Type, out.ET.Entity), getComponents, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "Domain", 0x106, class, getDomain, setDomain, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "Id", 0x6, System.Int64, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfDefaultAttribute(), out.MongoDB.Bson.Serialization.Attributes.BsonDefaultValueAttribute(0), out.MongoDB.Bson.Serialization.Attributes.BsonElementAttribute(), out.MongoDB.Bson.Serialization.Attributes.BsonIdAttribute() },
            { "InstanceId", 0x6, System.Int64, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "IsComponent", 0x101, System.Boolean, getIsComponent, setIsComponent, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "IsCreate", 0x106, System.Boolean, getIsCreate, setIsCreate, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "IsDisposed", 0x206, System.Boolean, getIsDisposed, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "IsFromPool", 0x106, System.Boolean, getIsFromPool, setIsFromPool, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "IsRegister", 0x106, System.Boolean, getIsRegister, setIsRegister, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() },
            { "Parent", 0x106, class, getParent, setParent, out.MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute() }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
