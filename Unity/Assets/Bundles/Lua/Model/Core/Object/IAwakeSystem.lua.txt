-- Generated by CSharp.lua Compiler
local System = System
System.namespace("ET", function (namespace)
  namespace.interface("IAwakeSystem", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.interface("IAwake", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.interface("IAwake_1", function ()
    return function (A)
      return {
        __metadata__ = function (out)
          return {
            class = { 0x106, A }
          }
        end
      }
    end
  end)

  namespace.interface("IAwake_2", function ()
    return function (A, B)
      return {
        __metadata__ = function (out)
          return {
            class = { 0x206, A, B }
          }
        end
      }
    end
  end)

  namespace.interface("IAwake_3", function ()
    return function (A, B, C)
      return {
        __metadata__ = function (out)
          return {
            class = { 0x306, A, B, C }
          }
        end
      }
    end
  end)

  namespace.interface("IAwake_4", function ()
    return function (A, B, C, D)
      return {
        __metadata__ = function (out)
          return {
            class = { 0x406, A, B, C, D }
          }
        end
      }
    end
  end)

  namespace.class("AwakeSystem_1", function (namespace)
    return function (T)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o)
        this:Awake(System.cast(T, o))
      end
      return {
        base = function (out)
          return {
            out.ET.IAwakeSystem,
            out.ET.IAwake
          }
        end,
        Type = Type,
        Run = Run,
        __metadata__ = function (out)
          return {
            methods = {
              { "Run", 0x106, Run, System.Object },
              { "Type", 0x86, Type, System.Type }
            },
            class = { 0x106, T, out.ET.ObjectSystemAttribute() }
          }
        end
      }
    end
  end)

  namespace.class("AwakeSystem_2", function (namespace)
    return function (T, A)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o, a)
        this:Awake(System.cast(T, o), a)
      end
      return {
        base = function (out)
          return {
            out.ET.IAwakeSystem,
            out.ET.IAwake_1(A)
          }
        end,
        Type = Type,
        Run = Run,
        __metadata__ = function (out)
          return {
            methods = {
              { "Run", 0x206, Run, System.Object, A },
              { "Type", 0x86, Type, System.Type }
            },
            class = { 0x206, T, A, out.ET.ObjectSystemAttribute() }
          }
        end
      }
    end
  end)

  namespace.class("AwakeSystem_3", function (namespace)
    return function (T, A, B)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o, a, b)
        this:Awake(System.cast(T, o), a, b)
      end
      return {
        base = function (out)
          return {
            out.ET.IAwakeSystem,
            out.ET.IAwake_2(A, B)
          }
        end,
        Type = Type,
        Run = Run,
        __metadata__ = function (out)
          return {
            methods = {
              { "Run", 0x306, Run, System.Object, A, B },
              { "Type", 0x86, Type, System.Type }
            },
            class = { 0x306, T, A, B, out.ET.ObjectSystemAttribute() }
          }
        end
      }
    end
  end)

  namespace.class("AwakeSystem_4", function (namespace)
    return function (T, A, B, C)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o, a, b, c)
        this:Awake(System.cast(T, o), a, b, c)
      end
      return {
        base = function (out)
          return {
            out.ET.IAwakeSystem,
            out.ET.IAwake_3(A, B, C)
          }
        end,
        Type = Type,
        Run = Run,
        __metadata__ = function (out)
          return {
            methods = {
              { "Run", 0x406, Run, System.Object, A, B, C },
              { "Type", 0x86, Type, System.Type }
            },
            class = { 0x406, T, A, B, C, out.ET.ObjectSystemAttribute() }
          }
        end
      }
    end
  end)
end)
