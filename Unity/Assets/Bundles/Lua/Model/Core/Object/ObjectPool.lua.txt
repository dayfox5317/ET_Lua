-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local QueueObject = System.Queue(ET.Object)
local ET
local DictTypeComponentQueue
System.import(function (out)
  ET = out.ET
  DictTypeComponentQueue = System.Dictionary(System.Type, ET.ComponentQueue)
end)
System.namespace("ET", function (namespace)
  namespace.class("ComponentQueue", function (namespace)
    local Enqueue, Dequeue, Peek, getQueue, getCount, Dispose, __ctor__
    __ctor__ = function (this, typeName)
      this.queue = QueueObject()
      ET.Object.__ctor__(this)
      this.TypeName = typeName
    end
    Enqueue = function (this, entity)
      this.queue:Enqueue(entity)
    end
    Dequeue = function (this)
      return this.queue:Dequeue()
    end
    Peek = function (this)
      return this.queue:Peek()
    end
    getQueue = function (this)
      return this.queue
    end
    getCount = function (this)
      return #this.queue
    end
    Dispose = function (this)
      while #this.queue > 0 do
        local component = this.queue:Dequeue()
        component:Dispose()
      end
    end
    return {
      base = function (out)
        return {
          out.ET.Object
        }
      end,
      Enqueue = Enqueue,
      Dequeue = Dequeue,
      Peek = Peek,
      getQueue = getQueue,
      getCount = getCount,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Count", 0x206, System.Int32, getCount },
            { "Queue", 0x206, System.Queue(out.ET.Object), getQueue },
            { "TypeName", 0x6, System.String }
          },
          fields = {
            { "queue", 0x1, System.Queue(out.ET.Object) }
          },
          methods = {
            { ".ctor", 0x106, nil, System.String },
            { "Dequeue", 0x86, Dequeue, out.ET.Object },
            { "Dispose", 0x6, Dispose },
            { "Enqueue", 0x106, Enqueue, out.ET.Object },
            { "Peek", 0x86, Peek, out.ET.Object }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("ObjectPool", function (namespace)
    local instance, getInstance, Fetch, Fetch1, Recycle, Clear, Dispose, class, 
    __ctor__
    __ctor__ = function (this)
      this.dictionary = DictTypeComponentQueue()
      ET.Object.__ctor__(this)
    end
    getInstance = function ()
      if instance == nil then
        instance = class()
      end

      return instance
    end
    Fetch = function (this, type)
      local obj
      local default, queue = this.dictionary:TryGetValue(type)
      if not default then
        obj = System.cast(ET.Object, System.Activator.CreateInstance(type))
      elseif queue:getCount() == 0 then
        obj = System.cast(ET.Object, System.Activator.CreateInstance(type))
      else
        obj = queue:Dequeue()
      end

      return obj
    end
    Fetch1 = function (this, T)
      local t = System.cast(T, Fetch(this, System.typeof(T)))
      return t
    end
    Recycle = function (this, obj)
      local type = obj:GetType()
      local queue
      local default
      default, queue = this.dictionary:TryGetValue(type)
      if not default then
        queue = ET.ComponentQueue(type:getName())

        this.dictionary:AddKeyValue(type, queue)
      end

      queue:Enqueue(obj)
    end
    Clear = function (this)
      for _, kv in System.each(this.dictionary) do
        kv.Value:Dispose()
      end

      this.dictionary:Clear()
    end
    Dispose = function (this)
      for _, kv in System.each(this.dictionary) do
        kv.Value:Dispose()
      end

      this.dictionary:Clear()
      instance = nil
    end
    class = {
      base = function (out)
        return {
          out.ET.Object
        }
      end,
      getInstance = getInstance,
      Fetch = Fetch,
      Fetch1 = Fetch1,
      Recycle = Recycle,
      Clear = Clear,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "dictionary", 0x6, System.Dictionary(System.Type, out.ET.ComponentQueue) },
            { "instance", 0x9, class }
          },
          properties = {
            { "Instance", 0x20E, class, getInstance }
          },
          methods = {
            { "Clear", 0x6, Clear },
            { "Dispose", 0x6, Dispose },
            { "Fetch", 0x186, Fetch, System.Type, out.ET.Object },
            { "Fetch", 0x10086, Fetch1, function (T) return T end },
            { "Recycle", 0x106, Recycle, out.ET.Object }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
