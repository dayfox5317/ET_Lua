-- Generated by CSharp.lua Compiler
local System = System
System.namespace("ET", function (namespace)
  namespace.class("DoubleMap_2", function (namespace)
    return function (K, V)
      local ForEach, getKeys, getValues, Add, GetValueByKey, GetKeyByValue, RemoveByKey, RemoveByValue, 
      Clear, ContainsKey, ContainsValue, Contains, internal, __ctor1__, __ctor2__
      local ListK = System.List(K)
      local ListV = System.List(V)
      local DictKV = System.Dictionary(K, V)
      local DictVK = System.Dictionary(V, K)
      internal = function (this)
        this.kv = DictKV()
        this.vk = DictVK()
      end
      __ctor1__ = function (this)
        internal(this)
      end
      __ctor2__ = function (this, capacity)
        internal(this)
        this.kv = DictKV(capacity)
        this.vk = DictVK(capacity)
      end
      ForEach = function (this, action)
        if action == nil then
          return
        end
        local keys = this.kv:getKeys()
        for _, key in System.each(keys) do
          action(key, this.kv:get(key), K, V)
        end
      end
      getKeys = function (this)
        return ListK(this.kv:getKeys())
      end
      getValues = function (this)
        return ListV(this.vk:getKeys())
      end
      Add = function (this, key, value)
        if key == nil or value == nil or this.kv:ContainsKey(key) or this.vk:ContainsKey(value) then
          return
        end
        this.kv:AddKeyValue(key, value)
        this.vk:AddKeyValue(value, key)
      end
      GetValueByKey = function (this, key)
        if key ~= nil and this.kv:ContainsKey(key) then
          return this.kv:get(key)
        end
        return System.default(V)
      end
      GetKeyByValue = function (this, value)
        if value ~= nil and this.vk:ContainsKey(value) then
          return this.vk:get(value)
        end
        return System.default(K)
      end
      RemoveByKey = function (this, key)
        if key == nil then
          return
        end
        local value
        local default
        default, value = this.kv:TryGetValue(key)
        if not default then
          return
        end

        this.kv:RemoveKey(key)
        this.vk:RemoveKey(value)
      end
      RemoveByValue = function (this, value)
        if value == nil then
          return
        end

        local key
        local default
        default, key = this.vk:TryGetValue(value)
        if not default then
          return
        end

        this.kv:RemoveKey(key)
        this.vk:RemoveKey(value)
      end
      Clear = function (this)
        this.kv:Clear()
        this.vk:Clear()
      end
      ContainsKey = function (this, key)
        if key == nil then
          return false
        end
        return this.kv:ContainsKey(key)
      end
      ContainsValue = function (this, value)
        if value == nil then
          return false
        end
        return this.vk:ContainsKey(value)
      end
      Contains = function (this, key, value)
        if key == nil or value == nil then
          return false
        end
        return this.kv:ContainsKey(key) and this.vk:ContainsKey(value)
      end
      return {
        ForEach = ForEach,
        getKeys = getKeys,
        getValues = getValues,
        Add = Add,
        GetValueByKey = GetValueByKey,
        GetKeyByValue = GetKeyByValue,
        RemoveByKey = RemoveByKey,
        RemoveByValue = RemoveByValue,
        Clear = Clear,
        ContainsKey = ContainsKey,
        ContainsValue = ContainsValue,
        Contains = Contains,
        __ctor__ = {
          __ctor1__,
          __ctor2__
        },
        __metadata__ = function (out)
          return {
            fields = {
              { "kv", 0x1, System.Dictionary(K, V) },
              { "vk", 0x1, System.Dictionary(V, K) }
            },
            methods = {
              { ".ctor", 0x6, __ctor1__ },
              { ".ctor", 0x106, __ctor2__, System.Int32 },
              { "Add", 0x206, Add, K, V },
              { "Clear", 0x6, Clear },
              { "Contains", 0x286, Contains, K, V, System.Boolean },
              { "ContainsKey", 0x186, ContainsKey, K, System.Boolean },
              { "ContainsValue", 0x186, ContainsValue, V, System.Boolean },
              { "ForEach", 0x106, ForEach, System.Delegate(K, V, System.Void) },
              { "GetKeyByValue", 0x186, GetKeyByValue, V, K },
              { "GetValueByKey", 0x186, GetValueByKey, K, V },
              { "RemoveByKey", 0x106, RemoveByKey, K },
              { "RemoveByValue", 0x106, RemoveByValue, V }
            },
            properties = {
              { "Keys", 0x206, System.List(K), getKeys },
              { "Values", 0x206, System.List(V), getValues }
            },
            class = { 0x206, K, V }
          }
        end
      }
    end
  end)
end)
