-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ListETTask = System.List(ET.ETTask)
System.namespace("ET", function (namespace)
  namespace.class("ETTaskHelper", function (namespace)
    local WaitAny, WaitAny1, WaitAll, WaitAll1, WaitAll2, WaitAll3, class
    namespace.class("CoroutineBlocker", function (namespace)
      local WaitAsync, __ctor__
      __ctor__ = function (this, count)
        this.tcss = ListETTask()
        this.count = count
      end
      WaitAsync = function (this)
        return System.async(function (async, this)
          this.count = this.count - 1
          if this.count < 0 then
            return
          end

          if this.count == 0 then
            local t = this.tcss
            this.tcss = nil
            for _, ttcs in System.each(t) do
              ttcs:SetResult()
            end

            return
          end

          local tcs = ET.ETTask.Create(true)

          this.tcss:Add(tcs)
          async:Await(tcs)
        end, nil, this)
      end
      return {
        count = 0,
        WaitAsync = WaitAsync,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "count", 0x1, System.Int32 },
              { "tcss", 0x1, System.List(out.ET.ETTask) }
            },
            methods = {
              { ".ctor", 0x106, nil, System.Int32 },
              { "WaitAsync", 0x86, WaitAsync, out.ET.ETTask }
            },
            class = { 0x1 }
          }
        end
      }
    end)
    WaitAny = function (tasks, cancellationToken, T)
      return System.async(function (async, tasks, cancellationToken, T)
        if #tasks == 0 then
          return false
        end

        local coroutineBlocker = class.CoroutineBlocker(2)

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
        for _, task in System.each(tasks) do
          RunOneTask(task):Coroutine()
        end


        async:Await(coroutineBlocker:WaitAsync())

        if cancellationToken == nil then
          return true
        end

        return not cancellationToken:IsCancel()
      end, nil, tasks, cancellationToken, T)
    end
    WaitAny1 = function (tasks, cancellationToken)
      return System.async(function (async, tasks, cancellationToken)
        if #tasks == 0 then
          return false
        end

        local coroutineBlocker = class.CoroutineBlocker(2)

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
        for _, task in System.each(tasks) do
          RunOneTask(task):Coroutine()
        end


        async:Await(coroutineBlocker:WaitAsync())

        if cancellationToken == nil then
          return true
        end

        return not cancellationToken:IsCancel()
      end, nil, tasks, cancellationToken)
    end
    WaitAll = function (tasks, cancellationToken, T)
      return System.async(function (async, tasks, cancellationToken, T)
        if #tasks == 0 then
          return false
        end

        local coroutineBlocker = class.CoroutineBlocker(#tasks + 1)

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
        for _, task in System.each(tasks) do
          RunOneTask(task):Coroutine()
        end


        async:Await(coroutineBlocker:WaitAsync())

        if cancellationToken == nil then
          return true
        end

        return not cancellationToken:IsCancel()
      end, nil, tasks, cancellationToken, T)
    end
    WaitAll1 = function (tasks, cancellationToken, T)
      return System.async(function (async, tasks, cancellationToken, T)
        if #tasks == 0 then
          return false
        end

        local coroutineBlocker = class.CoroutineBlocker(#tasks + 1)

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
        for _, task in System.each(tasks) do
          RunOneTask(task):Coroutine()
        end


        async:Await(coroutineBlocker:WaitAsync())

        if cancellationToken == nil then
          return true
        end

        return not cancellationToken:IsCancel()
      end, nil, tasks, cancellationToken, T)
    end
    WaitAll2 = function (tasks, cancellationToken)
      return System.async(function (async, tasks, cancellationToken)
        if #tasks == 0 then
          return false
        end

        local coroutineBlocker = class.CoroutineBlocker(#tasks + 1)

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
        for _, task in System.each(tasks) do
          RunOneTask(task):Coroutine()
        end

        async:Await(coroutineBlocker:WaitAsync())


        if cancellationToken == nil then
          return true
        end

        return not cancellationToken:IsCancel()
      end, nil, tasks, cancellationToken)
    end
    WaitAll3 = function (tasks, cancellationToken)
      return System.async(function (async, tasks, cancellationToken)
        if #tasks == 0 then
          return false
        end

        local coroutineBlocker = class.CoroutineBlocker(#tasks + 1)

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
        for _, task in System.each(tasks) do
          RunOneTask(task):Coroutine()
        end

        async:Await(coroutineBlocker:WaitAsync())


        if cancellationToken == nil then
          return true
        end

        return not cancellationToken:IsCancel()
      end, nil, tasks, cancellationToken)
    end
    class = {
      WaitAny = WaitAny,
      WaitAny1 = WaitAny1,
      WaitAll = WaitAll,
      WaitAll1 = WaitAll1,
      WaitAll2 = WaitAll2,
      WaitAll3 = WaitAll3,
      __metadata__ = function (out)
        return {
          methods = {
            { "WaitAll", 0x1028E, WaitAll, function (T) return System.Array(out.ET.ETTask_1(T)), out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) end },
            { "WaitAll", 0x1028E, WaitAll1, function (T) return System.List(out.ET.ETTask_1(T)), out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) end },
            { "WaitAll", 0x28E, WaitAll2, System.Array(out.ET.ETTask), out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) },
            { "WaitAll", 0x28E, WaitAll3, System.List(out.ET.ETTask), out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) },
            { "WaitAny", 0x1028E, WaitAny, function (T) return System.Array(out.ET.ETTask_1(T)), out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) end },
            { "WaitAny", 0x28E, WaitAny1, System.Array(out.ET.ETTask), out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) }
          },
          class = { 0xE }
        }
      end
    }
    return class
  end)
end)
