-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETCold = ETCold
local FairyGUI = FairyGUI
local UnityEngine = UnityEngine
local DictStringUIPackage = System.Dictionary(System.String, FairyGUI.UIPackage)
System.namespace("ET", function (namespace)
  -- <summary>
  -- 管理所有UI Package
  -- </summary>
  namespace.class("FUIPackageComponent", function (namespace)
    local AddPackageAsync, LoadPackageInternalAsync, RemovePackage, __ctor__
    __ctor__ = function (this)
      this.packages = DictStringUIPackage()
      ET.Entity.__ctor__(this)
    end
    AddPackageAsync = function (this, type)
      return System.async(function (async, this, type)
        if this.packages:ContainsKey(type) then
          return
        end

        local desTextAsset = async:Await(ET.ResourcesComponent.Instance:LoadAssetAsync(ETCold.ABPathHelper.GetFGUIDesPath(type .. "_fui"), UnityEngine.TextAsset))

        this.packages:AddKeyValue(type, FairyGUI.UIPackage.AddPackageAsync(desTextAsset:getbytes(), type, LoadPackageInternalAsync))
      end, nil, this, type)
    end
    -- <summary>
    -- 加载资源的异步委托
    -- </summary>
    -- <param name="name">注意，这个name是FGUI内部组装的纹理全名，例如FUILogin_atlas0</param>
    -- <param name="extension"></param>
    -- <param name="type"></param>
    -- <param name="item"></param>
    LoadPackageInternalAsync = function (name, extension, type, item)
      System.async(function (async, name, extension, type, item)
        local texture = async:Await(ET.ResourcesComponent.Instance:LoadAssetAsync(ETCold.ABPathHelper.GetFGUIResPath(name, extension), UnityEngine.Texture))
        item.owner:SetItemAsset(item, texture, FairyGUI.DestroyMethod.Unload)
        ET.Log.Debug(extension)
      end, true, name, extension, type, item)
    end
    -- <summary>
    -- 移除一个包，并清理其asset
    -- </summary>
    -- <param name="type"></param>
    RemovePackage = function (this, type)
      if ET.ResourcesComponent.Instance == nil then
        return
      end
      local package

      local default
      default, package = this.packages:TryGetValue(type)
      if default then
        local p = FairyGUI.UIPackage.GetByName(package:getname())
        if p ~= nil then
          local items = package:GetItemsArray()
          for i = 0, #items - 1 do
            if items:get(i).type == FairyGUI.PackageItemType.Atlas then
              ET.ResourcesComponent.Instance:UnLoadAsset(ETCold.ABPathHelper.GetFGUIAtlasResPath(items:get(i).file .. ""))
            end
          end

          -- ResourcesComponent.Instance.UnLoadAsset(ABPathHelper.GetFGUIResPath($"{type}_atlas0", ".png"));
          ET.ResourcesComponent.Instance:UnLoadAsset(ETCold.ABPathHelper.GetFGUIDesPath(type .. "_fui"))
          FairyGUI.UIPackage.unloadBundleByFGUI = false
          FairyGUI.UIPackage.RemovePackage(package:getname())
        end

        this.packages:RemoveKey(package:getname())
      end
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      AddPackageAsync = AddPackageAsync,
      RemovePackage = RemovePackage,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "packages", 0x1, System.Dictionary(System.String, out.FairyGUI.UIPackage) }
          },
          methods = {
            { "AddPackageAsync", 0x186, AddPackageAsync, System.String, out.ET.ETTask },
            { "LoadPackageInternalAsync", 0x409, LoadPackageInternalAsync, System.String, System.String, System.Type, out.FairyGUI.PackageItem },
            { "RemovePackage", 0x106, RemovePackage, System.String }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
