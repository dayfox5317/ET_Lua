-- Generated by CSharp.lua Compiler
--[[
 * FileName:    FguiAdapter
 * Author:      Jave.Lin
 * CreateTime:  #2018-08-03#
 * Description: [Description]
 * 
]]
local System = System
local ET = ET
local FairyGUI = FairyGUI
local UnityEngine = UnityEngine
local ET
local ETFUIScalerComponent
local ListRegisterInfo
local DictInt32RegisterInfo
System.import(function (out)
  ET = out.ET
  ETFUIScalerComponent = ET.FUIScalerComponent
  ListRegisterInfo = System.List(ETFUIScalerComponent.RegisterInfo)
  DictInt32RegisterInfo = System.Dictionary(System.Int32, ETFUIScalerComponent.RegisterInfo)
end)
System.namespace("ET", function (namespace)
  namespace.class("FUIScalerComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.FUIScalerComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.FUIScalerComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("FUIScalerComponentLateUpdateSystem", function (namespace)
    local LateUpdate
    LateUpdate = function (this, self)
      self:LateUpdate()
    end
    return {
      base = function (out)
        return {
          out.ET.LateUpdateSystem_1(out.ET.FUIScalerComponent)
        }
      end,
      LateUpdate = LateUpdate,
      __metadata__ = function (out)
        return {
          methods = {
            { "LateUpdate", 0x106, LateUpdate, out.ET.FUIScalerComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)
  -- <summary>
  -- FGUI的分辨率适配类型枚举
  -- </summary>
  namespace.enum("AdaptedType", function ()
    local class
    class = {
      None = 0,
      RelationFullScreen = 1,
      ScaleFullScreen = 2,
      Center = 3,
      RawCenter = 4,
      __metadata__ = function (out)
        return {
          fields = {
            { "Center", 0xE, class },
            { "None", 0xE, class },
            { "RawCenter", 0xE, class },
            { "RelationFullScreen", 0xE, class },
            { "ScaleFullScreen", 0xE, class }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)


  -- <summary>
  -- author  :   Jave.Lin
  -- date    :   2018-08-03
  -- </summary>
  namespace.class("FUIScalerComponent", function (namespace)
    local Register, Unregister, ForceAdaptAll, AdaptSingle, CheckAdapt, DeepCopyFrom, Recover, Clear, 
    Awake, LateUpdate, Dispose, class, __ctor__
    namespace.class("RegisterInfo", function (namespace)
      local ToString, __ctor__
      __ctor__ = function (this)
        this.adaptedType = ET.AdaptedType.None
      end
      ToString = function (this)
        return "name:" .. this.name .. ", type:" .. this.adaptedType:EnumToString(ET.AdaptedType) .. ", useGlobal:" .. this.useGlobalAdaptedType
      end
      return {
        instId = 0,
        hc = 0,
        useGlobalAdaptedType = false,
        sx = 0,
        sy = 0,
        sw = 0,
        sh = 0,
        ssw = 0,
        ssh = 0,
        ToString = ToString,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "adaptedType", 0x6, out.ET.AdaptedType },
              { "go", 0x6, out.FairyGUI.GObject },
              { "hc", 0x6, System.Int32 },
              { "instId", 0x6, System.Int32 },
              { "name", 0x6, System.String },
              { "sh", 0x6, System.Single },
              { "ssh", 0x6, System.Single },
              { "ssw", 0x6, System.Single },
              { "sw", 0x6, System.Single },
              { "sx", 0x6, System.Single },
              { "sy", 0x6, System.Single },
              { "useGlobalAdaptedType", 0x6, System.Boolean }
            },
            methods = {
              { "ToString", 0x86, ToString, System.String }
            },
            class = { 0x6 }
          }
        end
      }
    end)
    __ctor__ = function (this)
      this.usingGlobalType = ET.AdaptedType.None
      this.globalAdaptedType = ET.AdaptedType.ScaleFullScreen
      ET.Entity.__ctor__(this)
    end
    Register = function (this, go, adaptedType, usingGlobalAdaptedType, name)
      local hc = go:GetHashCode()
      local info = nil
      local default
      default, info = this._registerMap:TryGetValue(hc)
      if default then
        info.adaptedType = adaptedType
        info.useGlobalAdaptedType = usingGlobalAdaptedType
        local extern
        if System.String.IsNullOrEmpty(name) then
          local ref = info
          local out = ref.instId + 1
          ref.instId = out
          extern = "AutoName_" .. out
        else
          extern = name
        end
        info.name = extern
        AdaptSingle(this, go)
        return
        -- already register, re-adapt
      end
      local extern = class.RegisterInfo()
      local ref = this.instCounter + 1
      this.instCounter = ref
      extern.instId = ref
      local out
      if System.String.IsNullOrEmpty(name) then
        out = "AutoName_" .. hc
      else
        out = name
      end
      extern.name = out
      extern.hc = hc
      extern.useGlobalAdaptedType = usingGlobalAdaptedType
      extern.adaptedType = adaptedType
      extern.sx = go:getx()
      extern.sy = go:gety()
      extern.sw = go:getwidth()
      extern.sh = go:getheight()
      extern.ssw = go:getscaleX()
      extern.ssh = go:getscaleY()
      extern.go = go
      info = extern
      this._registerMap:set(hc, info)
      this.RegisterList:Add(info)
      AdaptSingle(this, go)
      local extern = this.OnRegisterChanged
      if extern ~= nil then
        extern()
      end
    end
    Unregister = function (this, go, recover)
      local hc = go:GetHashCode()
      local info = nil
      local default
      default, info = this._registerMap:TryGetValue(hc)
      if not default then
        return
        -- not found register
      end
      if recover then
        Recover(this, go, info)
      end
      this._registerMap:RemoveKey(hc)
      this.RegisterList:Remove(info)
      local extern = this.OnRegisterChanged
      if extern ~= nil then
        extern()
      end
    end
    ForceAdaptAll = function (this)
      for _, item in System.each(this._registerMap) do
        local continue
        repeat
          local info = item.Value
          if info.go == nil or info.go:getdisplayObject() == nil or UnityEngine.Object.op_Equality(info.go:getdisplayObject():getgameObject(), nil) then
            this._removeList:Add(info)
            continue = true
            break
          end
          AdaptSingle(this, info.go)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    AdaptSingle = function (this, go)
      local info = nil
      local default
      default, info = this._registerMap:TryGetValue(go:GetHashCode())
      if not default then
        return
        -- not found
      end
      local type = info.useGlobalAdaptedType and this.globalAdaptedType or info.adaptedType
      repeat
        local extern = type
        if extern == ET.AdaptedType.None then
          Recover(this, go, info)
          break
        elseif extern == ET.AdaptedType.RelationFullScreen then
          go:SetScale(info.ssw, info.ssh)
          go:SetXY(info.sx, info.sy)
          go:MakeFullScreen()
          break
        elseif extern == ET.AdaptedType.ScaleFullScreen then
          go:SetSize(info.sw, info.sh)
          go:SetXY(info.sx, info.sy)
          go:SetScale(FairyGUI.GRoot.getinst():getwidth() / go:getwidth(), FairyGUI.GRoot.getinst():getheight() / go:getheight())
          break
        elseif extern == ET.AdaptedType.Center then
          go:SetSize(info.sw, info.sh)
          go:SetScale(info.ssw, info.ssh)
          go:SetXY((FairyGUI.GRoot.getinst():getwidth() - info.go:getwidth()) / 2, (FairyGUI.GRoot.getinst():getheight() - info.go:getheight()) / 2)
          break
        elseif extern == ET.AdaptedType.RawCenter then
          go:SetXY((FairyGUI.GRoot.getinst():getwidth() - info.go:getwidth()) / 2, (FairyGUI.GRoot.getinst():getheight() - info.go:getheight()) / 2)

          break
        else
          break
        end
      until 1
    end
    CheckAdapt = function (this)
      local adapt = false
      if this.lastSW ~= UnityEngine.Screen.getwidth() or this.lastSH ~= UnityEngine.Screen.getheight() then
        adapt = true
        this.lastSW = UnityEngine.Screen.getwidth()
        this.lastSH = UnityEngine.Screen.getheight()
      end
      if this.usingGlobalType ~= this.globalAdaptedType then
        adapt = true
        this.usingGlobalType = this.globalAdaptedType
      end
      if adapt then
        ForceAdaptAll(this)
      end
    end
    DeepCopyFrom = function (this, obj)
      Clear(this)

      this.OnRegisterChanged = obj.OnRegisterChanged
      this.RegisterList = obj.RegisterList
      this.globalAdaptedType = obj.globalAdaptedType
      this.usingGlobalType = obj.usingGlobalType
      this._registerMap = obj._registerMap
      this._removeList = obj._removeList
      this.lastSW = obj.lastSW
      this.lastSH = obj.lastSH

      obj._registerMap = nil
      obj._removeList = nil

      this:getDomain():RemoveComponent(class)
      --if (obj.gameObject != null)
      --{
      --    UObj.DestroyImmediate(obj.gameObject);
      --}
      --else
      --{
      --    UObj.DestroyImmediate(obj);
      --}
    end
    Recover = function (this, go, info)
      go:SetXY(info.sx, info.sy)
      go:SetSize(info.sw, info.sh)
      go:SetScale(info.ssw, info.ssh)
    end
    Clear = function (this)
      this.OnRegisterChanged = nil
      if this._registerMap ~= nil then
        this._registerMap:Clear()
        this._registerMap = nil
      end
      if this._removeList ~= nil then
        this._removeList:Clear()
        this._removeList = nil
      end
      if this.RegisterList ~= nil then
        this.RegisterList:Clear()
        this.RegisterList = nil
      end
    end
    Awake = function (this)
      this.RegisterList = ListRegisterInfo()
      this._registerMap = DictInt32RegisterInfo()
      this._removeList = ListRegisterInfo()
      this.lastSW = UnityEngine.Screen.getwidth()
      this.lastSH = UnityEngine.Screen.getheight()
      ForceAdaptAll(this)
    end
    LateUpdate = function (this)
      CheckAdapt(this)

      if this._removeList ~= nil and #this._removeList > 0 then
        do
          local i = 0 local len = #this._removeList
          while i < len do
            this._registerMap:RemoveKey(this._removeList:get(i).hc)
            i = i + 1
          end
        end
        this._registerMap:Clear()
      end

      if this._registerMap ~= nil then
        this.Count = this._registerMap:getCount()
      else
        this.Count = 0
      end
    end
    Dispose = function (this)
      Clear(this)
      ET.Entity.Dispose(this)
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      instCounter = 0,
      lastSW = 0,
      lastSH = 0,
      Count = 0,
      Register = Register,
      Unregister = Unregister,
      ForceAdaptAll = ForceAdaptAll,
      AdaptSingle = AdaptSingle,
      Awake = Awake,
      LateUpdate = LateUpdate,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "_registerMap", 0x1, System.Dictionary(System.Int32, out.ET.FUIScalerComponent.RegisterInfo) },
            { "_removeList", 0x1, System.List(out.ET.FUIScalerComponent.RegisterInfo) },
            { "Count", 0x6, System.Int32, out.UnityEngine.HeaderAttribute("当前已注册了的自适应对象的数量") },
            { "globalAdaptedType", 0x6, out.ET.AdaptedType, out.UnityEngine.HeaderAttribute("全局方式") },
            { "instCounter", 0x1, System.Int32 },
            { "lastSH", 0x1, System.Single },
            { "lastSW", 0x1, System.Single },
            { "OnRegisterChanged", 0x6, System.Delegate, out.UnityEngine.HideInInspector() },
            { "RegisterList", 0x6, System.List(out.ET.FUIScalerComponent.RegisterInfo) },
            { "usingGlobalType", 0x1, out.ET.AdaptedType }
          },
          methods = {
            { "AdaptSingle", 0x106, AdaptSingle, out.FairyGUI.GObject },
            { "Awake", 0x6, Awake },
            { "CheckAdapt", 0x1, CheckAdapt },
            { "Clear", 0x1, Clear },
            { "DeepCopyFrom", 0x101, DeepCopyFrom, class },
            { "Dispose", 0x6, Dispose },
            { "ForceAdaptAll", 0x6, ForceAdaptAll },
            { "LateUpdate", 0x6, LateUpdate },
            { "Recover", 0x201, Recover, out.FairyGUI.GObject, class.RegisterInfo },
            { "Register", 0x406, Register, out.FairyGUI.GObject, out.ET.AdaptedType, System.Boolean, System.String },
            { "Unregister", 0x206, Unregister, out.FairyGUI.GObject, System.Boolean }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
