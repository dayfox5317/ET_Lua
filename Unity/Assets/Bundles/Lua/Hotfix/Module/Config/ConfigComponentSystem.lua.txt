-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ListTask = System.List(System.Task)
local ArrayByte = System.Array(System.Byte)
local DictStringArrayByte = System.Dictionary(System.String, ArrayByte)
System.namespace("ET", function (namespace)
  namespace.class("ConfigAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.ConfigComponent.Instance = self
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.ConfigComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.ConfigComponent }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("ConfigDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.ConfigComponent.Instance = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.ConfigComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.ConfigComponent }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("ConfigComponentSystem", function (namespace)
    local LoadOneConfig, LoadAsync, LoadOneInThread
    LoadOneConfig = function (self, configType)
      local oneConfigBytes = self.ConfigLoader:GetOneConfigBytes(configType:getName())

      local category = ET.ProtobufHelper.FromBytes(configType, oneConfigBytes, 0, #oneConfigBytes)

      self.AllConfig:set(configType, category)
    end
    LoadAsync = function (self)
      return System.async(function (async, self)
        self.AllConfig:Clear()
        local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.ConfigAttribute))

        local configBytes = DictStringArrayByte()
        self.ConfigLoader:GetAllConfigBytes(configBytes)

        local listTasks = ListTask()

        for _, type in System.each(types) do
          local task = System.Task.Run(function ()
            LoadOneInThread(self, type, configBytes)
          end)
          listTasks:Add(task)
        end
        async:Await(ET.ETTask.getCompletedTask())
        async:await(System.Task.WhenAll(nil, listTasks:ToArray()))
      end, nil, self)
    end
    LoadOneInThread = function (self, configType, configBytes)
      local oneConfigBytes = configBytes:get(configType:getName())

      local category = ET.ProtobufHelper.FromBytes(configType, oneConfigBytes, 0, #oneConfigBytes)

      -- lock(self)
      do
        self.AllConfig:set(configType, category)
      end
    end
    return {
      LoadOneConfig = LoadOneConfig,
      LoadAsync = LoadAsync,
      __metadata__ = function (out)
        return {
          methods = {
            { "LoadAsync", 0x18E, LoadAsync, out.ET.ConfigComponent, out.ET.ETTask },
            { "LoadOneConfig", 0x20E, LoadOneConfig, out.ET.ConfigComponent, System.Type },
            { "LoadOneInThread", 0x309, LoadOneInThread, out.ET.ConfigComponent, System.Type, System.Dictionary(System.String, System.Array(System.Byte)) }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
