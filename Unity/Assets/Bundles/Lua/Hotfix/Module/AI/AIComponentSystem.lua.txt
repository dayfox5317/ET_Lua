-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
System.namespace("ET", function (namespace)
  namespace.class("AIComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, aiConfigId)
      self.AIConfigId = aiConfigId
      local check = nil

      check = AIComponentSystem.Check
      self.Timer = ET.TimerComponent.Instance:NewRepeatedTimer(1000, check)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_2(out.ET.AIComponent, System.Int32)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x206, Awake, out.ET.AIComponent, System.Int32 }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("AIComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      self.Timer = ET.TimerComponent.Instance:Remove(self.Timer)
      local default = self.CancellationToken
      if default ~= nil then
        default:Cancel()
      end
      self.CancellationToken = nil
      self.Current = 0
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.AIComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.AIComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("AIComponentSystem", function (namespace)
    local Check, Cancel
    Check = function (self)
      if self:getParent() == nil then
        self.Timer = ET.TimerComponent.Instance:Remove(self.Timer)
        return
      end

      local oneAI = ET.AIConfigCategory.Instance.AIConfigs:get(self.AIConfigId)

      for _, aiConfig in System.each(oneAI:getValues()) do
        local continue
        repeat
          local _, aaiHandler = ET.AIDispatcherComponent.Instance.AIHandlers:TryGetValue(aiConfig.Name)

          if aaiHandler == nil then
            ET.Log.Error("not found aihandler: " .. aiConfig.Name)
            continue = true
            break
          end

          local ret = aaiHandler:Check(self, aiConfig)
          if ret ~= 0 then
            continue = true
            break
          end

          if self.Current == aiConfig:getId() then
            break
          end

          Cancel(self)
          -- 取消之前的行为
          local cancellationToken = ET.ETCancellationToken()
          self.CancellationToken = cancellationToken
          self.Current = aiConfig:getId()

          aaiHandler:Execute(self, aiConfig, cancellationToken):Coroutine()
          return
        until 1
        if not continue then
          break
        end
      end
    end
    Cancel = function (self)
      local default = self.CancellationToken
      if default ~= nil then
        default:Cancel()
      end
      self.Current = 0
      self.CancellationToken = nil
    end
    return {
      Check = Check,
      __metadata__ = function (out)
        return {
          methods = {
            { "Cancel", 0x109, Cancel, out.ET.AIComponent },
            { "Check", 0x10E, Check, out.ET.AIComponent }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
