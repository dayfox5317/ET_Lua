-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETCold = ETCold
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("OuterMessageDispatcher", function (namespace)
    local Dispatch
    Dispatch = function (this, session, memoryStream)
      local opcode = ETCold.StreamHelper.ToUInt16(memoryStream, 0 --[[Packet.KcpOpcodeIndex]])
      local type = ET.OpcodeTypeComponent.Instance:GetType1(opcode)
      local message = ET.MessageSerializeHelper.DeserializeFrom(opcode, type, memoryStream)

      if ET.TimeHelper.ClientFrameTime() - this.lastMessageTime > 3000 then
        ET.Log.Info("可能导致卡死的消息: " .. System.toString(this.LastMessage))
      end

      this.lastMessageTime = ET.TimeHelper.ClientFrameTime()
      this.LastMessage = message

      local response = message
      if System.is(response, ET.IResponse) then
        session:OnRead(opcode, response)
        return
      end

      ET.OpcodeHelper.LogMsg(ET.SceneHelper.DomainZone(session), opcode, message)
      -- 普通消息或者是Rpc请求消息
      ET.MessageDispatcherComponentHelper.Handle(ET.MessageDispatcherComponent.Instance, session, opcode, message)
    end
    return {
      base = function (out)
        return {
          out.ET.IMessageDispatcher
        }
      end,
      lastMessageTime = 9223372036854775807 --[[Int64.MaxValue]],
      Dispatch = Dispatch,
      __metadata__ = function (out)
        return {
          fields = {
            { "LastMessage", 0x6, System.Object },
            { "lastMessageTime", 0x6, System.Int64 }
          },
          methods = {
            { "Dispatch", 0x206, Dispatch, out.ET.Session, System.IO.MemoryStream }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
