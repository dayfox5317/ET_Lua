-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("NetKcpComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self.MessageDispatcher = ET.OuterMessageDispatcher()

      self.Service = ET.TService(ET.NetThreadComponent.Instance.ThreadSynchronizationContext, ET.ServiceType.Outer)
      self.Service.ErrorCallback = self.Service.ErrorCallback + function (id, errId)
        ET.NetKcpComponentSystem.OnError(self, id, errId)
      end
      self.Service.ReadCallback = self.Service.ReadCallback + function (id, stream)
        ET.NetKcpComponentSystem.OnRead(self, id, stream)
      end
      self.Service.AcceptCallback = self.Service.AcceptCallback + function (id, ip)
        ET.NetKcpComponentSystem.OnAccept(self, id, ip)
      end

      ET.NetThreadComponentSystem.Add(ET.NetThreadComponent.Instance, self.Service)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.NetKcpComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.NetKcpComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("NetKcpComponentAwake1System", function (namespace)
    local Awake
    Awake = function (this, self, address)
      self.MessageDispatcher = ET.OuterMessageDispatcher()

      self.Service = System.new(ET.TService, 2, ET.NetThreadComponent.Instance.ThreadSynchronizationContext, address, ET.ServiceType.Outer)

      self.Service.ErrorCallback = self.Service.ErrorCallback + function (id, errId)
        ET.NetKcpComponentSystem.OnError(self, id, errId)
      end
      self.Service.ReadCallback = self.Service.ReadCallback + function (id, stream)
        ET.NetKcpComponentSystem.OnRead(self, id, stream)
      end
      self.Service.AcceptCallback = self.Service.AcceptCallback + function (id, ip)
        ET.NetKcpComponentSystem.OnAccept(self, id, ip)
      end

      ET.NetThreadComponentSystem.Add(ET.NetThreadComponent.Instance, self.Service)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_2(out.ET.NetKcpComponent, System.Net.IPEndPoint)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x206, Awake, out.ET.NetKcpComponent, System.Net.IPEndPoint }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("NetKcpComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      self.MessageDispatcher = ET.OuterMessageDispatcher()
    end
    return {
      base = function (out)
        return {
          out.ET.LoadSystem_1(out.ET.NetKcpComponent)
        }
      end,
      Load = Load,
      __metadata__ = function (out)
        return {
          methods = {
            { "Load", 0x106, Load, out.ET.NetKcpComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("NetKcpComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.NetThreadComponentSystem.Remove(ET.NetThreadComponent.Instance, self.Service)
      self.Service:Destroy()
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.NetKcpComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.NetKcpComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("NetKcpComponentSystem", function (namespace)
    local OnRead, OnError, OnAccept, Get, Create
    OnRead = function (self, channelId, memoryStream)
      local session = self:GetChild(channelId, ET.Session)
      if session == nil then
        return
      end

      session.LastRecvTime = ET.TimeHelper.ClientNow()
      self.MessageDispatcher:Dispatch(session, memoryStream)
    end
    OnError = function (self, channelId, error)
      local session = self:GetChild(channelId, ET.Session)
      if session == nil then
        return
      end

      session.Error = error
      session:Dispose()
    end
    OnAccept = function (self, channelId, ipEndPoint)
      local session = ET.EntityFactory.CreateWithParentAndId1(self, channelId, self.Service, false, ET.Session, ET.AService)
      session.RemoteAddress = ipEndPoint

      session:AddComponent2(ET.SessionAcceptTimeoutComponent)
      -- 客户端连接，2秒检查一次recv消息，10秒没有消息则断开
      session:AddComponent3(2000 --[[NetThreadComponent.checkInteral]], ET.SessionIdleCheckerComponent, System.Int32)
    end
    Get = function (self, id)
      local session = self:GetChild(id, ET.Session)
      return session
    end
    Create = function (self, realIPEndPoint)
      local channelId = ET.RandomHelper.RandInt64()
      local session = ET.EntityFactory.CreateWithParentAndId1(self, channelId, self.Service, false, ET.Session, ET.AService)
      session.RemoteAddress = realIPEndPoint
      session:AddComponent3(2000 --[[NetThreadComponent.checkInteral]], ET.SessionIdleCheckerComponent, System.Int32)

      self.Service:GetOrCreate(session.Id, realIPEndPoint)

      return session
    end
    return {
      OnRead = OnRead,
      OnError = OnError,
      OnAccept = OnAccept,
      Get = Get,
      Create = Create,
      __metadata__ = function (out)
        return {
          methods = {
            { "Create", 0x28E, Create, out.ET.NetKcpComponent, System.Net.IPEndPoint, out.ET.Session },
            { "Get", 0x28E, Get, out.ET.NetKcpComponent, System.Int64, out.ET.Session },
            { "OnAccept", 0x30E, OnAccept, out.ET.NetKcpComponent, System.Int64, System.Net.IPEndPoint },
            { "OnError", 0x30E, OnError, out.ET.NetKcpComponent, System.Int64, System.Int32 },
            { "OnRead", 0x30E, OnRead, out.ET.NetKcpComponent, System.Int64, System.IO.MemoryStream }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
