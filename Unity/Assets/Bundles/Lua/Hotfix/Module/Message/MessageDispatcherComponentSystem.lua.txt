-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ListIMHandler = System.List(ET.IMHandler)
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("MessageDispatcherComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.MessageDispatcherComponent.Instance = self
      ET.MessageDispatcherComponentHelper.Load(self)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.MessageDispatcherComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.MessageDispatcherComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("MessageDispatcherComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      ET.MessageDispatcherComponentHelper.Load(self)
    end
    return {
      base = function (out)
        return {
          out.ET.LoadSystem_1(out.ET.MessageDispatcherComponent)
        }
      end,
      Load = Load,
      __metadata__ = function (out)
        return {
          methods = {
            { "Load", 0x106, Load, out.ET.MessageDispatcherComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("MessageDispatcherComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.MessageDispatcherComponent.Instance = nil
      self.Handlers:Clear()
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.MessageDispatcherComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.MessageDispatcherComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  -- <summary>
  -- 消息分发组件
  -- </summary>
  namespace.class("MessageDispatcherComponentHelper", function (namespace)
    local Load, RegisterHandler, Handle
    Load = function (self)
      self.Handlers:Clear()

      local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.MessageHandlerAttribute))

      for _, type in System.each(types) do
        local continue
        repeat
          local iMHandler = System.as(System.Activator.CreateInstance(type), ET.IMHandler)
          if iMHandler == nil then
            ET.Log.Error("message handle " .. type:getName() .. " 需要继承 IMHandler")
            continue = true
            break
          end

          local messageType = iMHandler:GetMessageType()
          local opcode = ET.OpcodeTypeComponent.Instance:GetOpcode(messageType)
          if opcode == 0 then
            ET.Log.Error("消息opcode为0: " .. messageType:getName())
            continue = true
            break
          end

          RegisterHandler(self, opcode, iMHandler)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    RegisterHandler = function (self, opcode, handler)
      if not self.Handlers:ContainsKey(opcode) then
        self.Handlers:AddKeyValue(opcode, ListIMHandler())
      end

      self.Handlers:get(opcode):Add(handler)
    end
    Handle = function (self, session, opcode, message)
      local actions
      local default
      default, actions = self.Handlers:TryGetValue(opcode)
      if not default then
        ET.Log.Error("消息没有处理: " .. opcode .. " " .. System.toString(message))
        return
      end

      for _, ev in System.each(actions) do
        System.try(function ()
          ev:Handle(session, message)
        end, function (default)
          local e = default
          ET.Log.Error1(e)
        end)
      end
    end
    return {
      Load = Load,
      RegisterHandler = RegisterHandler,
      Handle = Handle,
      __metadata__ = function (out)
        return {
          methods = {
            { "Handle", 0x40E, Handle, out.ET.MessageDispatcherComponent, out.ET.Session, System.UInt16, System.Object },
            { "Load", 0x10E, Load, out.ET.MessageDispatcherComponent },
            { "RegisterHandler", 0x30E, RegisterHandler, out.ET.MessageDispatcherComponent, System.UInt16, out.ET.IMHandler }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
