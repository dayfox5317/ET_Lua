-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
System.namespace("ET", function (namespace)
  namespace.class("SessionIdleCheckerComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, checkInteral)
      local check = nil

      check = AIComponentSystem.Check
      self.RepeatedTimer = ET.TimerComponent.Instance:NewRepeatedTimer(checkInteral, check)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_2(out.ET.SessionIdleCheckerComponent, System.Int32)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x206, Awake, out.ET.SessionIdleCheckerComponent, System.Int32 }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("SessionIdleCheckerComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      self.RepeatedTimer = ET.TimerComponent.Instance:Remove(self.RepeatedTimer)
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.SessionIdleCheckerComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.SessionIdleCheckerComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("SessionIdleCheckerComponentSystem", function (namespace)
    local Check
    Check = function (self)
      local session = self:GetParent(ET.Session)
      local timeNow = ET.TimeHelper.ClientNow()

      if timeNow - session.LastRecvTime < 30000 --[[30 * 1000]] and timeNow - session.LastSendTime < 30000 --[[30 * 1000]] then
        return
      end

      ET.Log.Info("session timeout: " .. session.Id .. " " .. timeNow .. " " .. session.LastRecvTime .. " " .. session.LastSendTime .. " " .. timeNow - session.LastRecvTime .. " " .. timeNow - session.LastSendTime)
      session.Error = 110311 --[[ErrorCode.ERR_SessionSendOrRecvTimeout]]

      session:Dispose()
    end
    return {
      Check = Check,
      __metadata__ = function (out)
        return {
          methods = {
            { "Check", 0x10E, Check, out.ET.SessionIdleCheckerComponent }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
