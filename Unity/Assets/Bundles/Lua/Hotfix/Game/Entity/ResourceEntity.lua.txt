-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local UnityEngine = UnityEngine
local ET
local LinkedListResourceEntity
System.import(function (out)
  ET = out.ET
  LinkedListResourceEntity = System.LinkedList(ET.ResourceEntity)
end)
System.namespace("ET", function (namespace)
  namespace.class("ResourceEntityAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.ResourceEntity)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.ResourceEntity }
          },
          class = { 0x6 }
        }
      end
    }
  end)
  namespace.class("ResourceEntityDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      self.ResourceName = nil
      self.Target = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.ResourceEntity)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.ResourceEntity }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("ResourceEntity", function (namespace)
    local Awake, Spawn, Despawn, Release, __ctor__
    __ctor__ = function (this)
      ET.Entity.__ctor__(this)
    end
    Awake = function (this)
      this.DependsResourceList = LinkedListResourceEntity()
      this.IsAssetBundle = false
      this.LastUseTime = 0
      this.ReferenceCount = 0
    end
    Spawn = function (this)
      this.LastUseTime = UnityEngine.Time.gettime()
      if not this.IsAssetBundle then
        this.ReferenceCount = this.ReferenceCount + 1
      else
        --if (Game.Scene.GetComponent<Pool>().CheckAssetBundleIsLocked(ResourceName))
        --    ReferenceCount = 1;
      end
    end
    Despawn = function (this)
      this.LastUseTime = UnityEngine.Time.gettime()
      this.ReferenceCount = this.ReferenceCount - 1
      if this.ReferenceCount < 0 then
        this.ReferenceCount = 0
      end
    end
    Release = function (this)
      if this.IsAssetBundle then
        local bundle = System.as(this.Target, UnityEngine.AssetBundle)
        bundle:Unload(false)
        ET.Log.Debug("释放了资源包:" .. this.ResourceName)
      else
        ET.Log.Debug("释放了资源:" .. this.ResourceName)
      end

      this.ResourceName = nil
      this.ReferenceCount = 0
      this.Target = nil
      local default = this.DependsResourceList
      if default ~= nil then
        default:Clear()
      end

      this:Dispose()
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      IsAssetBundle = false,
      LastUseTime = 0,
      ReferenceCount = 0,
      Awake = Awake,
      Spawn = Spawn,
      Despawn = Despawn,
      Release = Release,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "IsAssetBundle", 0x6, System.Boolean },
            { "LastUseTime", 0x6, System.Single },
            { "ReferenceCount", 0x6, System.Int32 },
            { "ResourceName", 0x6, System.String },
            { "Target", 0x6, out.UnityEngine.Object }
          },
          properties = {
            { "DependsResourceList", 0x6, System.LinkedList(out.ET.ResourceEntity) }
          },
          methods = {
            { "Awake", 0x6, Awake },
            { "Despawn", 0x6, Despawn },
            { "Release", 0x6, Release },
            { "Spawn", 0x6, Spawn }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
