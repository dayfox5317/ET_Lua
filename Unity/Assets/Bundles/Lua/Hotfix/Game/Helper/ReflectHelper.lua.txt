-- Generated by CSharp.lua Compiler
local System = System
local SystemReflection = System.Reflection
System.namespace("ET", function (namespace)
  namespace.class("ReflectHelper", function (namespace)
    local GetMemberInfoType, GetValue, SetValue, GetDeclaringType, GetFieldType, GetName, GetNamespace, GetFullName, 
    GetBaseType, GetAssemblyQualifiedName, GetMembers, GetMembersLen
    GetMemberInfoType = function (obj)
      local fi = obj
      if System.is(fi, SystemReflection.FieldInfo) then
        return 0
      end
      local pi = obj
      if System.is(pi, SystemReflection.PropertyInfo) then
        return 1
      end
      local mi = obj
      if System.is(mi, SystemReflection.MethodInfo) then
        return 2
      end
      return - 1
    end
    GetValue = function (obj, target)
      local fi = obj
      if System.is(fi, SystemReflection.FieldInfo) then
        return fi:GetValue(target)
      end
      local pi = obj
      if System.is(pi, SystemReflection.PropertyInfo) then
        return pi:GetValue(target)
      end
      return ("")
    end
    SetValue = function (obj, target, value)
      local fi = obj
      if System.is(fi, SystemReflection.FieldInfo) then
        fi:SetValue(target, value)
      end
      local pi = obj
      if System.is(pi, SystemReflection.PropertyInfo) then
        pi:SetValue(target, value)
      end
    end
    GetDeclaringType = function (obj)
      local fi = obj
      if System.is(fi, SystemReflection.MemberInfo) then
        return fi:getDeclaringType()
      end

      return ("")
    end
    GetFieldType = function (obj)
      --  return obj.FieldType;
      local fi = obj
      if System.is(fi, SystemReflection.FieldInfo) then
        return fi:getFieldType()
      end
      local pi = obj
      if System.is(pi, SystemReflection.PropertyInfo) then
        return pi:getPropertyType()
      end
      return ("")
    end
    GetName = function (obj)
      local type = obj
      if System.is(type, System.Type) then
        return type:getName()
      end
      local mb = obj
      if System.is(mb, SystemReflection.MemberInfo) then
        return mb:getName()
      end

      return ("")
    end
    GetNamespace = function (type)
      return type:getNamespace()
    end
    GetFullName = function (type)
      return type:getFullName()
    end
    GetBaseType = function (type)
      return type:getBaseType()
    end
    GetAssemblyQualifiedName = function (type)
      return type:getAssemblyQualifiedName()
    end
    GetMembers = function (type)
      return type:GetMembers()
    end
    GetMembersLen = function (type)
      return #type
    end
    return {
      GetMemberInfoType = GetMemberInfoType,
      GetValue = GetValue,
      SetValue = SetValue,
      GetDeclaringType = GetDeclaringType,
      GetFieldType = GetFieldType,
      GetName = GetName,
      GetNamespace = GetNamespace,
      GetFullName = GetFullName,
      GetBaseType = GetBaseType,
      GetAssemblyQualifiedName = GetAssemblyQualifiedName,
      GetMembers = GetMembers,
      GetMembersLen = GetMembersLen,
      __metadata__ = function (out)
        return {
          methods = {
            { "GetAssemblyQualifiedName", 0x18E, GetAssemblyQualifiedName, System.Type, System.String },
            { "GetBaseType", 0x18E, GetBaseType, System.Type, System.Object },
            { "GetDeclaringType", 0x18E, GetDeclaringType, System.Object, System.Object },
            { "GetFieldType", 0x18E, GetFieldType, System.Object, System.Object },
            { "GetFullName", 0x18E, GetFullName, System.Type, System.String },
            { "GetMemberInfoType", 0x18E, GetMemberInfoType, System.Object, System.Int32 },
            { "GetMembers", 0x18E, GetMembers, System.Type, System.Array(System.Reflection.MemberInfo) },
            { "GetMembersLen", 0x18E, GetMembersLen, System.Array(System.Reflection.MemberInfo), System.Int32 },
            { "GetName", 0x18E, GetName, System.Object, System.String },
            { "GetNamespace", 0x18E, GetNamespace, System.Type, System.String },
            { "GetValue", 0x28E, GetValue, System.Object, System.Object, System.Object },
            { "SetValue", 0x30E, SetValue, System.Object, System.Object, System.Object }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
