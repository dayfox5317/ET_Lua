-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETEventType = ET.EventType
local UnityEngine = UnityEngine
local ETTask_1Boolean = ET.ETTask_1(System.Boolean)
local ListComponent_1Vector3 = ET.ListComponent_1(UnityEngine.Vector3)
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("MoveComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.MoveComponentSystem.Clear(self)
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.MoveComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          methods = {
            { "Destroy", 0x106, Destroy, out.ET.MoveComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("MoveComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self.StartTime = 0
      self.StartPos = UnityEngine.Vector3.getzero()
      self:setNeedTime(0)
      self.MoveTimer = 0
      self.Callback = nil
      self.Targets:Clear()
      self.Speed = 0
      self.N = 0
      self.TurnTime = 0
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.MoveComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          methods = {
            { "Awake", 0x106, Awake, out.ET.MoveComponent }
          },
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("MoveComponentSystem", function (namespace)
    local IsArrived, ChangeSpeed, MoveToAsync, MoveForward, StartMove, SetNextTarget, GetFaceV, FlashTo, 
    MoveTo, MoveTo1, Stop, Clear
    IsArrived = function (self)
      return #self.Targets == 0
    end
    ChangeSpeed = function (self, speed)
      if IsArrived(self) then
        return false
      end

      if speed < 0.0001 then
        return false
      end

      local unit = self:GetParent(ET.Unit)
      System.using(ListComponent_1Vector3.Create(), function (path)
        MoveForward(self, true)

        path.List:Add(unit:getPosition())
        -- 第一个是Unit的pos
        for i = self.N, #self.Targets - 1 do
          path.List:Add(self.Targets:get(i))
        end
        MoveToAsync(self, path.List, speed, 100):Coroutine()
      end)

      return true
    end
    MoveToAsync = function (self, target, speed, turnTime, cancellationToken)
      return System.async(function (async, self, target, speed, turnTime, cancellationToken)
        Stop(self)

        for _, v in System.each(target) do
          self.Targets:Add(v:__clone__())
        end

        self.IsTurnHorizontal = true
        self.TurnTime = turnTime
        self.Speed = speed
        local tcs = ETTask_1Boolean.Create(false)
        self.Callback = function (ret)
          tcs:SetResult(ret)
        end

        local default = ETEventType.MoveStart()
        default.Unit = self:GetParent(ET.Unit)
        ET.Game.getEventSystem():Publish(default, ETEventType.MoveStart):Coroutine()

        StartMove(self)

        local function CancelAction() 
          Stop(self)
        end

        local moveRet
        System.try(function ()
          local default = cancellationToken
          if default ~= nil then
            default:Add(CancelAction)
          end
          moveRet = async:Await(tcs)
        end, nil, function ()
          local default = cancellationToken
          if default ~= nil then
            default:Remove(CancelAction)
          end
        end)

        if moveRet then
          local default = ETEventType.MoveStop()
          default.Unit = self:GetParent(ET.Unit)
          ET.Game.getEventSystem():Publish(default, ETEventType.MoveStop):Coroutine()
        end
        return moveRet
      end, nil, self, target, speed, turnTime, cancellationToken)
    end
    MoveForward = function (self, needCancel)
      local unit = self:GetParent(ET.Unit)

      local timeNow = ET.TimeHelper.ClientNow()
      local moveTime = timeNow - self.StartTime
      while true do
        if moveTime <= 0 then
          return
        end

        -- 计算位置插值
        if moveTime >= self:getNeedTime() then
          unit:setPosition(self:getNextTarget())
          if self.TurnTime > 0 then
            unit:setRotation(self.To:__clone__())
          end
        else
          -- 计算位置插值
          local amount = moveTime * 1 / self:getNeedTime()
          if amount > 0 then
            local newPos = UnityEngine.Vector3.Lerp(self.StartPos, self:getNextTarget(), amount)
            unit:setPosition(newPos)
          end

          -- 计算方向插值
          if self.TurnTime > 0 then
            amount = moveTime * 1 / self.TurnTime
            local q = UnityEngine.Quaternion.Slerp(self.From, self.To, amount)
            unit:setRotation(q)
          end
        end

        moveTime = moveTime - self:getNeedTime()

        -- 表示这个点还没走完，等下一帧再来
        if moveTime < 0 then
          return
        end

        -- 到这里说明这个点已经走完

        -- 如果是最后一个点
        if self.N >= #self.Targets - 1 then
          unit:setPosition(self:getNextTarget())
          unit:setRotation(self.To:__clone__())

          local callback = self.Callback
          self.Callback = nil

          Clear(self)
          local default = callback
          if default ~= nil then
            default(not needCancel)
          end
          return
        end

        SetNextTarget(self)
      end
    end
    StartMove = function (self)
      ET.Log.Debug("StartMove---------------")
      local unit = self:GetParent(ET.Unit)

      self.BeginTime = ET.TimeHelper.ClientNow()
      self.StartTime = self.BeginTime
      SetNextTarget(self)

      self.MoveTimer = ET.TimerComponent.Instance:NewFrameTimer(function ()
        System.try(function ()
          MoveForward(self, false)
        end, function (default)
          local e = default
          ET.Log.Error("move timer error: " .. unit.Id .. "\n" .. System.toString(e))
        end)
      end)
    end
    SetNextTarget = function (self)
      local unit = self:GetParent(ET.Unit)

      local default = self
      default.N = default.N + 1

      -- 时间计算用服务端的位置, 但是移动要用客户端的位置来插值
      local v = GetFaceV(self)
      local distance = v:getmagnitude()

      -- 插值的起始点要以unit的真实位置来算
      self.StartPos = unit:getPosition()

      self.StartTime = self.StartTime + self:getNeedTime()

      self:setNeedTime(System.ToInt64(distance / self.Speed * 1000))


      if self.TurnTime > 0 then
        -- 要用unit的位置
        local faceV = GetFaceV(self)
        if faceV:getsqrMagnitude() < 0.0001 then
          return
        end
        self.From = unit:getRotation()

        if self.IsTurnHorizontal then
          faceV.y = 0
        end

        if math.Abs(faceV.x) > 0.01 or math.Abs(faceV.z) > 0.01 then
          self.To = UnityEngine.Quaternion.LookRotation(faceV, UnityEngine.Vector3.getup())
        end

        return
      end

      if self.TurnTime == 0 then
        local faceV = GetFaceV(self)
        if self.IsTurnHorizontal then
          faceV.y = 0
        end

        if math.Abs(faceV.x) > 0.01 or math.Abs(faceV.z) > 0.01 then
          self.To = UnityEngine.Quaternion.LookRotation(faceV, UnityEngine.Vector3.getup())
          unit:setRotation(self.To:__clone__())
        end
      end
    end
    GetFaceV = function (self)
      return UnityEngine.Vector3.op_Subtraction(self:getNextTarget(), self:getPreTarget())
    end
    FlashTo = function (self, target)
      local unit = self:GetParent(ET.Unit)
      unit:setPosition(target)
      return true
    end
    MoveTo = function (self, target, speed, turnTime, isTurnHorizontal)
      if speed < 0.001 then
        ET.Log.Error("speed is 0 " .. self:GetParent(ET.Unit).ConfigId .. " " .. self:GetParent(ET.Unit).Id .. " " .. speed)
        return false
      end

      Stop(self)

      self.IsTurnHorizontal = isTurnHorizontal
      self.TurnTime = turnTime
      self.Targets:Add(self:GetParent(ET.Unit):getPosition())
      self.Targets:Add(target:__clone__())
      self.Speed = speed

      StartMove(self)
      return true
    end
    MoveTo1 = function (self, target, speed, turnTime)
      if #target == 0 then
        return true
      end

      if math.Abs(speed) < 0.001 then
        ET.Log.Error("speed is 0 " .. self:GetParent(ET.Unit).ConfigId .. " " .. self:GetParent(ET.Unit).Id)
        return false
      end

      Stop(self)

      for _, v in System.each(target) do
        self.Targets:Add(v:__clone__())
      end

      self.IsTurnHorizontal = true
      self.TurnTime = turnTime
      self.Speed = speed

      StartMove(self)

      return true
    end
    Stop = function (self)
      if #self.Targets > 0 then
        MoveForward(self, true)
      end

      Clear(self)
    end
    Clear = function (self)
      self.StartTime = 0
      self.StartPos = UnityEngine.Vector3.getzero()
      self.BeginTime = 0
      self:setNeedTime(0)
      self.MoveTimer = ET.TimerComponent.Instance:Remove(self.MoveTimer)
      self.Targets:Clear()
      self.Speed = 0
      self.N = 0
      self.TurnTime = 0
      self.IsTurnHorizontal = false

      if self.Callback ~= nil then
        local callback = self.Callback
        self.Callback = nil
        callback(false)
      end
    end
    return {
      IsArrived = IsArrived,
      ChangeSpeed = ChangeSpeed,
      MoveToAsync = MoveToAsync,
      MoveForward = MoveForward,
      FlashTo = FlashTo,
      MoveTo = MoveTo,
      MoveTo1 = MoveTo1,
      Stop = Stop,
      Clear = Clear,
      __metadata__ = function (out)
        return {
          methods = {
            { "ChangeSpeed", 0x28E, ChangeSpeed, out.ET.MoveComponent, System.Single, System.Boolean },
            { "Clear", 0x10E, Clear, out.ET.MoveComponent },
            { "FlashTo", 0x28E, FlashTo, out.ET.MoveComponent, out.UnityEngine.Vector3, System.Boolean },
            { "GetFaceV", 0x189, GetFaceV, out.ET.MoveComponent, out.UnityEngine.Vector3 },
            { "IsArrived", 0x18E, IsArrived, out.ET.MoveComponent, System.Boolean },
            { "MoveForward", 0x20E, MoveForward, out.ET.MoveComponent, System.Boolean },
            { "MoveTo", 0x58E, MoveTo, out.ET.MoveComponent, out.UnityEngine.Vector3, System.Single, System.Int32, System.Boolean, System.Boolean },
            { "MoveTo", 0x48E, MoveTo1, out.ET.MoveComponent, System.List(out.UnityEngine.Vector3), System.Single, System.Int32, System.Boolean },
            { "MoveToAsync", 0x58E, MoveToAsync, out.ET.MoveComponent, System.List(out.UnityEngine.Vector3), System.Single, System.Int32, out.ET.ETCancellationToken, out.ET.ETTask_1(System.Boolean) },
            { "SetNextTarget", 0x109, SetNextTarget, out.ET.MoveComponent },
            { "StartMove", 0x109, StartMove, out.ET.MoveComponent },
            { "Stop", 0x10E, Stop, out.ET.MoveComponent }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
